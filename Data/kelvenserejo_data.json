{
    "username": "kelvenserejo",
    "email": "kelvenserejo@gmail.com",
    "country": "Brazil",
    "company": "",
    "name": "Kelven Serejo",
    "city": "Diadema",
    "website": "",
    "job_title": "",
    "local_language": "English",
    "github_url": "https://github.com/KelvenVS",
    "gh_uid": "122582326",
    "li_uid": "2G7z9xD-tW",
    "personal_first_name": "Kelven",
    "personal_last_name": "Serejo",
    "graduation_year": "2025",
    "timezone": "America/Sao_Paulo",
    "is_professional": false,
    "hackos": 513,
    "favorite_challenges": [],
    "challenges_created": [],
    "other_emails": [
        "kelvenserejo@hotmail.com"
    ],
    "all_schools": [],
    "snippets": [],
    "submissions": [
        {
            "contest": "Master",
            "challenge": "Say \"Hello, World!\" With Python",
            "code": "if __name__ == '__main__':\n    print(\"Hello, World!\")\n",
            "score": 1.0,
            "language": "pypy3"
        },
        {
            "contest": "Master",
            "challenge": "Python If-Else",
            "code": "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\ndef tank_manager(n):\n    if n % 2 == 1:\n        print('Weird')\n    elif n % 2 == 0 and n \u003e= 2 and n \u003c= 5:\n        print('Not Weird')\n    elif n % 2 == 0 and n \u003e= 6 and n \u003c= 20:\n        print('Weird')\n    elif n % 2 == 0 and n \u003e 20\n        print('Not Weird')\n        \nif __name__ == '__main__':\n    n = int(input().strip())\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Python If-Else",
            "code": "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\ndef even_or_ood_bostted(n):\n    if n % 2 == 1:\n        print('Weird')\n    elif n % 2 == 0 and n \u003e= 2 and n \u003c= 5:\n        print('Not Weird')\n    elif n % 2 == 0 and n \u003e= 6 and n \u003c= 20:\n        print('Weird')\n    elif n % 2 == 0 and n \u003e 20:\n        print('Not Weird')\n        \nif __name__ == '__main__':\n    n = int(input().strip())\n    even_or_ood_bostted(n)\n    \n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Arithmetic Operators",
            "code": "def arithmetic_operators(a,b):\n    print(a+b)\n    print(a-b)\n    print(a*b)\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    arithmetic_operators(a,b)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Python: Division",
            "code": "def interger_float(a,b):\n    print(a//b)\n    print(a/b)\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    interger_float(a,b)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Loops",
            "code": "def square_per_num(a):\n    index = 0\n    for index in range(index,a):\n        print(index**2)\n\nif __name__ == '__main__':\n    n = int(input())\n    square_per_num(n)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Loops",
            "code": "def square_per_num(a):\n    index = 0\n    for index in range(index,a):\n        print(index**2)\n\nif __name__ == '__main__':\n    n = int(input())\n    square_per_num(n)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Write a function",
            "code": "def is_leap(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else: \n            return False\n    else:\n        return False\n\n",
            "score": 0.8,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Write a function",
            "code": "def is_leap(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else: \n            return True\n    else:\n        return False\n\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Print Function",
            "code": "def position(n):\n    str_aux = ''\n    for i in range(0,n):\n        str_aux = f'{str_aux}{str(i+1)}'\n    print(str_aux)\nif __name__ == '__main__':\n    n = int(input())\n    position(n)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Print Function",
            "code": "def position(n):\n    str_aux = ''\n    for i in range(0,n):\n        str_aux = f'{str_aux}{str(i+1)}'\n    print(str_aux)\nif __name__ == '__main__':\n    n = int(input())\n    position(n)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Print Function",
            "code": "def position(n):\n    str_aux = ''.join(str(i) for i in range (1, n+1))\n    print(str_aux)\nif __name__ == '__main__':\n    n = int(input())\n    position(n)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Lists",
            "code": "def handler_list(N):\n    hlist = []\n    for _ in range(N):\n        command = input().split()\n        if command[0] == 'insert':\n            hlist.insert(int(command[1]), int(command[2]))\n        elif command[0] == 'print':   \n            print(hlist)\n        elif command[0] == 'remove':        \n            hlist.remove(int(command[1]))\n        elif command[0] == 'append':\n            hlist.append(int(command[1])) \n        elif command[0] == 'sort':\n            hlist.sort()\n        elif command[0] == 'pop':\n            hlist.pop()\n        elif command[0] == 'reverse':\n            hlist.reverse()\n\nif __name__ == '__main__':\n    N = int(input())\n    handler_list(N)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "List Comprehensions",
            "code": "def fctn1(xs,ys,zs,n):\n    for x in range(0,xs):\n        for y in range(0,ys):\n            for z in range(0,zs):\n                if (x+y+z) \u003e n:\n                    print([x,y,z])\n        \nif __name__ == '__main__':\n    x = int(input())\n    y = int(input())\n    z = int(input())\n    n = int(input())\n    \n    fctn1(x,y,z,n)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "List Comprehensions",
            "code": "def fctn1(xs,ys,zs,n):\n    for x in range(0,xs):\n        for y in range(0,ys):\n            for z in range(0,zs):\n                print([x,y,z])\n                if (x+y+z) \u003c= n:\n                    print([x,y,z])\n                        \nif __name__ == '__main__':\n    x = int(input())\n    y = int(input())\n    z = int(input())\n    n = int(input())\n    \n    fctn1(x,y,z,n)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "List Comprehensions",
            "code": "def fctn1(xs,ys,zs,n):\n    aux_list = []\n    \n    for x in range(0,xs+1):\n        for y in range(0,ys+1):\n            for z in range(0,zs+1):\n                if x+y+z != n: \n                    aux_list.append([x,y,z])     \n                        \n    return print(aux_list)\n\nif __name__ == '__main__':\n    x = int(input())\n    y = int(input())\n    z = int(input())\n    n = int(input())\n    \n    fctn1(x,y,z,n)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Find the Runner-Up Score!  ",
            "code": "def runner_up(n,score_arr):\n    arr = list(set(score_arr))\n    arr.sort(reverse=True)\n    \n    if len(arr) \u003e 1:\n        return arr[1]\n    else:\n        return \"No runner-up.\"\n    \n    \n    \n    \nif __name__ == '__main__':\n    n = int(input())\n    arr = map(int, input().split())\n    \n    print(runner_up(n,arr))\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Nested Lists",
            "code": "def fctn1(arr):\n    arr.sort(key=lambda x: x[1])\n    #print(arr)\n    \n    seclow_score = None\n    for i in range(len(arr) - 1):\n        if arr[i][1] != arr[i+1][1]:\n            seclow_score = arr[i+1][1]\n            break\n\n    if seclow_score is not None:\n        students_alphabetic = []\n        for student,score in arr:\n            if score == seclow_score:\n                students_alphabetic.append(student)\n        \n        students_alphabetic.sort()\n        for student in students_alphabetic:\n            print(student)\n    else: \n        print(\"There is no second lowest grade in the class\")\n    \n    \nif __name__ == '__main__':\n    student_arr = []\n    for _ in range(int(input())):\n        name = input()\n        score = float(input())\n        student_arr.append([name,score])\n    \n    fctn1(student_arr)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Finding the percentage",
            "code": "def average(query,student_marks):\n    return f'{sum(student_marks[query])/3:.2f}'\n    \nif __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    \n    print(average(query_name,student_marks))\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Finding the percentage",
            "code": "def average(query,student_marks):\n    return f'{sum(student_marks[query])/3:.2f}'\n    \nif __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    \n    print(average(query_name,student_marks))\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Map and Lambda Function",
            "code": "cube = lambda x: x**3\n\ndef fibonacci(n):   \n    \n    fibolist = []\n    if n == 0:\n        fibolist.append(0)\n    elif n == 1:\n        fibolist.append(0)\n        fibolist.append(1)\n    else:\n        fibolist.append(0)\n        fibolist.append(1)\n        aux = 0\n        for i in range(0,n-2):\n            aux = fibolist[i] + fibolist[i+1]\n            fibolist.append(aux)\n    return fibolist\n    \n",
            "score": 0.75,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Map and Lambda Function",
            "code": "cube = lambda x: x**3\n\ndef fibonacci(n):   \n    \n    fibolist = []\n    if n == 0:\n        return fibolist\n    elif n == 1:\n        fibolist.append(0)\n        fibolist.append(1)\n        return fibolist\n    else:\n        fibolist.append(0)\n        fibolist.append(1)\n        aux = 0\n        for i in range(0,n-2):\n            aux = fibolist[i] + fibolist[i+1]\n            fibolist.append(aux)\n        return fibolist\n    \n",
            "score": 0.875,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Map and Lambda Function",
            "code": "cube = lambda x: x**3\n\ndef fibonacci(n):   \n    \n    fibolist = []\n    if n == 0:\n        return fibolist\n    elif n == 1:\n        fibolist.append(0)\n        fibolist.append(1)\n        return fibolist\n    else:\n        fibolist = [0, 1]\n        aux = 0\n        for i in range(0,n-2):\n            aux = fibolist[i] + fibolist[i+1]\n            fibolist.append(aux)\n        return fibolist\n    \n",
            "score": 0.875,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Map and Lambda Function",
            "code": "cube = lambda x: x**3\n\ndef fibonacci(n):   \n    \n    fibolist = []\n    if n == 0:\n        return fibolist\n    elif n == 1:\n        fibolist = [0]\n        return fibolist\n    else:\n        fibolist = [0, 1]\n        aux = 0\n        for i in range(0,n-2):\n            aux = fibolist[i] + fibolist[i+1]\n            fibolist.append(aux)\n        return fibolist\n    \n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Tuples ",
            "code": "\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Tuples ",
            "code": "if __name__ == '__main__':\n    #qtd de elmentos\n    n = int(raw_input())\n\n    #map\n    t = list(map(int, raw_input().split()))\n\n    aux = tuple(t)\n    print(hash(aux))\n",
            "score": 1.0,
            "language": "python"
        },
        {
            "contest": "Master",
            "challenge": "sWAP cASE",
            "code": "def swap_case(s):\n    aux_list = []\n    for i in s.strip():\n        if i.isupper():\n            aux_list.append(i.lower())\n        else:\n            aux_list.append(i.upper())\n    return \"\".join(aux_list)\n\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "String Split and Join",
            "code": "def split_and_join(line):\n    arr_line = line.split(\" \")\n    new_line = \"-\".join(arr_line)\n    return new_line\n\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "What's Your Name?",
            "code": "def print_full_name(first, last):\n    return print(f'Hello {first} {last}! You just delved into python.')\n\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Mutations",
            "code": "def mutate_string(string, position, character):\n    aux_string = list(string)\n    aux_string[position] = character\n    aux_string = \"\".join(aux_string)\n    return aux_string\n\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Find a string",
            "code": "def count_substring(string, sub_string):\n    count_str = (string.count(sub_string))\n    return count_str\n\n",
            "score": 0.888888888889,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Find a string",
            "code": "def count_substring(string, sub_string):\n    aux_string = list(string)\n    \n    count = 0\n    for i in range(len(aux_string)):\n        sliced_str = \"\".join(aux_string[i:i+len(sub_string)])\n        if  sliced_str == sub_string:\n            count+=1\n    return count\n            \n        \n\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Find a string",
            "code": "def count_substring(string, sub_string):\n    aux_string = list(string)\n    \n    count = 0\n    for i in range(len(aux_string)):\n        sliced_str = \"\".join(aux_string[i:i+len(sub_string)])\n        if  sliced_str == sub_string:\n            count+=1\n    return count\n            \n        \n\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "String Validators",
            "code": "def str_validator(s):\n    aux_tuple = [\n        (str.isalnum,False),\n        (str.isalpha,False),\n        (str.isdigit,False),\n        (str.islower,False),\n        (str.isupper,False)\n    ]\n    \n    for char in list(s):\n        for i in range(len(aux_tuple)):\n            method , key = aux_tuple[i]\n            if method(char):\n                aux_tuple[i] = (method ,True)\n    \n    for method,value in aux_tuple:\n        print(value)\n\n            \nif __name__ == '__main__':\n    s = input()\n    str_validator(s)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Text Alignment",
            "code": "#Replace all ______ with rjust, ljust or center. \n\nthickness = int(input()) #This must be an odd number\nc = 'H'\n\n#Top Cone\nfor i in range(thickness):\n    print((c*i).rjust(thickness-1)+c+(c*i).ljust(thickness-1))\n\n#Top Pillars\nfor i in range(thickness+1):\n    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))\n\n#Middle Belt\nfor i in range((thickness+1)//2):\n    print((c*thickness*5).center(thickness*6))    \n\n#Bottom Pillars\nfor i in range(thickness+1):\n    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))    \n\n#Bottom Cone\nfor i in range(thickness):\n    print(((c*(thickness-i-1)).rjust(thickness)+c+(c*(thickness-i-1)).ljust(thickness)).rjust(thickness*6))\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Text Wrap",
            "code": "\n\ndef wrap(string, max_width):\n    return textwrap.fill(string,max_width)\n    \n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "String Formatting",
            "code": "def print_formatted(number):\n    for i in range(1,number+1):\n        print((f'{i}    {oct(i)[2:]}    {hex(i)[2:]}    {bin(i)[2:]}').upper())\n\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "String Formatting",
            "code": "def print_formatted(number):\n    padding = len(bin(number)[2:])\n    \n    for i in range(1,number+1):\n        num_oct = oct(i)[2:].upper()\n        num_hex = hex(i)[2:].upper()\n        num_bin = bin(i)[2:].upper()\n        \n        print(f'{i:\u003e{padding}} {num_oct:\u003e{padding}} {num_hex:\u003e{padding}} {num_bin:\u003e{padding}}')\n\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "String Formatting",
            "code": "def print_formatted(number):\n    padding = len(bin(number)[2:])\n    \n    for i in range(1,number+1):\n        num_oct = oct(i)[2:].upper()\n        num_hex = hex(i)[2:].upper()\n        num_bin = bin(i)[2:].upper()\n        \n        print(f'{i:\u003e{padding}}{num_oct:\u003e{padding}}{num_hex:\u003e{padding}}{num_bin:\u003e{padding}}')\n\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "String Formatting",
            "code": "def print_formatted(number):\n    padding = len(bin(number)[2:])\n    \n    for i in range(1,number+1):\n        num_oct = oct(i)[2:].upper()\n        num_hex = hex(i)[2:].upper()\n        num_bin = bin(i)[2:].upper()\n        \n        print(f'{i:\u003e{padding}} {num_oct:\u003e{padding}} {num_hex:\u003e{padding}} {num_bin:\u003e{padding}}')\n\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Designer Door Mat",
            "code": "def sample_design(dimension):\n    #| . -\n    n , m = dimension\n    \n    struct1 = '.|.'\n    line_str = n-2\n    #1 3 5 7 9 11\n    str_central = 'WELCOME'\n    \n    #Cone\n    for i in range(1,line_str+1,2):\n        struct_line = struct1*i\n        bar_len = (m - len(struct_line)) // 2\n        bars = '-'*bar_len\n        print(f'{bars}{struct_line}{bars}')\n    \n    #Central line\n    bar_len = (m - len(str_central)) // 2\n    bars = '-'*bar_len\n    print(f'{bars}{str_central}{bars}')\n    \n    #Cone Inversed\n    for i in range(line_str - 1, 0,-2):\n        struct_line = struct1*i\n        bar_len = (m - len(struct_line)) // 2\n        bars = '-'*bar_len\n        print(f'{bars}{struct_line}{bars}')\n            \n\nif __name__ == \"__main__\":\n    dimension = tuple(list(map(int,input().split())))\n    sample_design(dimension)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Designer Door Mat",
            "code": "def sample_design(dimension):\n    #| . -\n    n , m = dimension\n    \n    struct1 = '.|.'\n    line_str = n-2\n    #1 3 5 7 9 11\n    str_central = 'WELCOME'\n    \n    #Cone\n    for i in range(1,line_str+1,2):\n        struct_line = struct1*i\n        bar_len = (m - len(struct_line)) // 2\n        bars = '-'*bar_len\n        print(f'{bars}{struct_line}{bars}')\n    \n    #Central line\n    bar_len = (m - len(str_central)) // 2\n    bars = '-'*bar_len\n    print(f'{bars}{str_central}{bars}')\n    \n    #Cone Inversed\n    for i in range(line_str, 0,-2):\n        struct_line = struct1*i\n        bar_len = (m - len(struct_line)) // 2\n        bars = '-'*bar_len\n        print(f'{bars}{struct_line}{bars}')\n            \n\nif __name__ == \"__main__\":\n    dimension = tuple(list(map(int,input().split())))\n    sample_design(dimension)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Alphabet Rangoli",
            "code": "import string   \n\ndef print_rangoli(size):\n\n    alphabet = list(string.ascii_lowercase)[:size]\n    aph_sliced = alphabet[:size]\n    aph_sli_rev = list(reversed(aph_sliced))\n    \n    rangnoli_list = []\n    \n    center_line = '-'.join(aph_sli_rev + aph_sliced[1:])\n    \n    #Cone Topo\n    for i in range(size-1):\n        \n        center_char = aph_sli_rev[i]\n        side1 = aph_sli_rev[:i-size]\n        side2 = aph_sliced[size-i:]\n        \n        line_rangoli = '-'.join(side1 + [center_char] + side2)\n        \n        i = len(line_rangoli)\n        while i \u003c len(center_line):\n            line_rangoli =  '-' + line_rangoli + '-'\n            i+=2\n        print(line_rangoli)\n        \n    #Cone Baixo\n    for i in range(size-1,-1,-1):\n        center_char = aph_sli_rev[i]\n        side1 = aph_sli_rev[:i-size]\n        side2 = aph_sliced[size-i:]\n\n        line_rangoli = '-'.join(side1 + [center_char] + side2)\n\n        i = len(line_rangoli)\n        while i \u003c len(center_line):\n            line_rangoli =  '-' + line_rangoli + '-'\n            i+=2\n        print(line_rangoli)    \n    \n        \n        \n",
            "score": 1.0,
            "language": "pypy3"
        },
        {
            "contest": "Master",
            "challenge": "Capitalize!",
            "code": "\n\n# Complete the solve function below.\ndef solve(s):\n    str_list = s.split()\n    \n    aux = []\n    for keyword in str_list:\n        aux.append(keyword.capitalize())\n    return ' '.join(aux)\n    \n",
            "score": 0.2,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Capitalize!",
            "code": "\n\n# Complete the solve function below.\ndef solve(s):\n    return ' '.join(word.capitalize() for word in s.split())\n\n    \n",
            "score": 0.2,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Capitalize!",
            "code": "\n\n# Complete the solve function below.\ndef solve(s):\n    str_list = s.split()\n    \n    aux = []\n    for keyword in str_list:\n        aux.append(keyword.capitalize())\n    return ' '.join(aux)\n    \n",
            "score": 0.2,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Capitalize!",
            "code": "\n\n# Complete the solve function below.\ndef solve(s):\n    return s.title()\n    \n",
            "score": 0.8,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Capitalize!",
            "code": "\n\n# Complete the solve function below.\ndef solve(s):\n    str_list = s.split()\n    \n    aux = []\n    for keyword in str_list:\n        aux.append(keyword.capitalize())\n    return ' '.join(aux)\n    \n",
            "score": 0.2,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Capitalize!",
            "code": "\n\n# Complete the solve function below.\ndef solve(s):\n    aux_string = []\n    for char in s:\n        aux_string.append(char)\n    \n    for i in range(len(aux_string)):\n        if aux_string[i-1] == ' ' or i == 0:\n            aux_string[i] = aux_string[i].upper()\n    aux_string = ''.join(aux_string)\n    \n    return aux_string\n    \n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "The Minion Game",
            "code": "def minion_game(string):\n    print(string)\n\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "The Minion Game",
            "code": "vowels = ['A','E','I','O','U']\n\ndef minion_game(s):\n    p1_name , p2_name = 'Stuart' , 'Kevin'\n    score_p1_con , score_p2_vow = 0 , 0\n    history_p1 , history_p2 = [] , []\n    \n    aux_string = list(s.upper())\n    slice_str = set()\n    \n    #Divide String\n    for i in range(len(aux_string)):\n        for j in range(i+1,len(aux_string)+1):\n            slice_str.add(''.join(aux_string[i:j]))\n    \n    #Count Occurrenc\n    for item in slice_str:\n        qty = s.count(item)\n        for vowel in vowels:\n            if item[0].startswith(vowel):\n                score_p2_vow+=qty\n                history_p2.append((item,qty))\n                qty = 0\n            else:\n                score_p1_con+=qty\n                history_p1.append((item,qty))\n                qty = 0\n    \n    #Score\n    if score_p1_con \u003e score_p2_vow:\n        print(p1_name,score_p1_con)\n    else:\n        print(p2_name,score_p2_vow)\n        \n\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "The Minion Game",
            "code": "vowels = ['A','E','I','O','U']\n\ndef minion_game(s):\n    p1_name , p2_name = 'Stuart' , 'Kevin'\n    score_p1_con , score_p2_vow = 0 , 0\n    history_p1 , history_p2 = [] , []\n    \n    aux_string = list(s.upper())\n    slice_str = set()\n    \n    #Divide String\n    for i in range(len(aux_string)):\n        for j in range(i+1,len(aux_string)+1):\n            slice_str.add(''.join(aux_string[i:j]))\n    \n    #Count Occurrenc\n    for item in slice_str:\n        qty = s.count(item)\n        for vowel in vowels:\n            if item.startswith(vowel):\n                score_p2_vow+=qty\n                history_p2.append((item,qty))\n                qty = 0\n            else:\n                score_p1_con+=qty\n                history_p1.append((item,qty))\n                qty = 0\n    \n    #Score\n    if score_p1_con \u003e score_p2_vow:\n        print(p1_name,score_p1_con)\n    else:\n        print(p2_name,score_p2_vow)\n        \n\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "The Minion Game",
            "code": "vowels = ['A','E','I','O','U']\n\ndef minion_game(s):\n    p1_name , p2_name = 'Stuart' , 'Kevin'\n    score_p1_con , score_p2_vow = 0 , 0\n    history_p1 , history_p2 = [] , []\n    \n    aux_string = list(s.upper())\n    slice_str = set()\n    \n    #Divide String\n    for i in range(len(aux_string)):\n        for j in range(i+1,len(aux_string)+1):\n            slice_str.add(''.join(aux_string[i:j]))\n    \n    #Count Occurrenc\n    for item in slice_str:\n        qty = s.count(item)\n        for vowel in vowels:\n            if item.startswith(vowel):\n                score_p2_vow+=qty\n                history_p2.append((item,qty))\n                qty = 0\n            else:\n                score_p1_con+=qty\n                history_p1.append((item,qty))\n                qty = 0\n    \n    #Score\n    if score_p1_con \u003e score_p2_vow:\n        print(p1_name,score_p1_con)\n    else:\n        print(p2_name,score_p2_vow)\n        \n\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "The Minion Game",
            "code": "vowels = ['A','E','I','O','U']\n\ndef minion_game(s):\n    p1_name , p2_name = 'Stuart' , 'Kevin'\n    score_p1_con , score_p2_vow = 0 , 0\n    history_p1 , history_p2 = [] , []\n    \n    aux_string = list(s.upper())\n    slice_str = set()\n    \n    #Divide String\n    for i in range(len(aux_string)):\n        for j in range(i+1,len(aux_string)+1):\n            slice_str.add(''.join(aux_string[i:j]))\n    \n    # Count Occurrences\n    for item in slice_str:\n        qty = s.count(item)\n        if item[0] in vowels:\n            score_p2_vow += qty\n            history_p2.append((item, qty))\n        else:\n            score_p1_con += qty\n            history_p1.append((item, qty))\n    \n    #Score\n    if score_p1_con \u003e score_p2_vow:\n        print(p1_name,score_p1_con)\n        print(history_p1)\n    else:\n        print(p2_name,score_p2_vow)\n        print(history_p2)\n        \n\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "The Minion Game",
            "code": "vowels = ['A','E','I','O','U']\n\ndef minion_game(s):\n    p1_name , p2_name = 'Stuart' , 'Kevin'\n    score_p1_con , score_p2_vow = 0 , 0\n    history_p1 , history_p2 = [] , []\n    \n    aux_string = list(s.upper())\n    slice_str = set()\n    \n    #Divide String\n    for i in range(len(aux_string)):\n        for j in range(i+1,len(aux_string)+1):\n            slice_str.add(''.join(aux_string[i:j]))\n    \n    # Count Occurrences\n    for item in slice_str:\n        qty = s.count(item)\n        if item[0] in vowels:\n            score_p2_vow += qty\n            history_p2.append((item, qty))\n        else:\n            score_p1_con += qty\n            history_p1.append((item, qty))\n    \n    #Score\n    if score_p1_con \u003e score_p2_vow:\n        print(p1_name,score_p1_con)\n        print(history_p1)\n    else:\n        print(p2_name,score_p2_vow)\n        print(history_p2)\n        \n\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "The Minion Game",
            "code": "vowels = ['A','E','I','O','U']\n\ndef minion_game(s):\n    p1_name , p2_name = 'Stuart' , 'Kevin'\n    score_p1_con , score_p2_vow = 0 , 0\n    history_p1 , history_p2 = [] , []\n    \n    aux_string = list(s.upper())\n    slice_str = set()\n    \n    #Divide String\n    for i in range(len(aux_string)):\n        for j in range(i+1,len(aux_string)+1):\n            slice_str.add(''.join(aux_string[i:j]))\n    \n    # Count Occurrences\n    for item in slice_str:\n        qty = s.count(item)\n        if item[0] in vowels:\n            score_p2_vow += qty\n            history_p2.append((item, qty))\n        else:\n            score_p1_con += qty\n            history_p1.append((item, qty))\n    \n    #Score\n    if score_p1_con \u003e score_p2_vow:\n        print(p1_name,score_p1_con)\n    else:\n        print(p2_name,score_p2_vow)\n\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "The Minion Game",
            "code": "vowels = ['A','E','I','O','U']\n\ndef minion_game(s):\n    p1_name , p2_name = 'Stuart' , 'Kevin'\n    score_p1_con , score_p2_vow = 0 , 0\n    history_p1 , history_p2 = [] , []\n    \n    aux_string = list(s.upper())\n    slice_str = set()\n    \n    for i in range(len(aux_string)):\n        for j in range(i+1,len(aux_string)+1):\n            sub_tring = ''.join(aux_string[i:j])\n            if sub_tring[0] in vowels:\n                score_p2_vow+=1\n                history_p2.append(sub_tring)\n            else:\n                score_p1_con+=1\n                history_p1.append(sub_tring)\n\n    #Score\n    if score_p1_con \u003e score_p2_vow:\n        print(p1_name,score_p1_con)\n    else:\n        print(p2_name,score_p2_vow)\n        print(history_p2)\n\n",
            "score": 0.002896871379,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "The Minion Game",
            "code": "vowels = ['A','E','I','O','U']\n\ndef minion_game(s):\n    p1_name , p2_name = 'Stuart' , 'Kevin'\n    score_p1_con , score_p2_vow = 0 , 0\n    history_p1 , history_p2 = [] , []\n    \n    aux_string = list(s.upper())\n    slice_str = set()\n    \n    # Sliced strings\n    for i in range(len(aux_string)):\n        sub_tring = ''.join(aux_string[i:])\n        slice_str.add(sub_tring)\n        for j in range(i+1,len(aux_string)+1):\n            sub_tring = ''.join(aux_string[i:j])\n            slice_str.add(sub_tring)\n    \n    for string in slice_str:\n        #Verify occurrences\n        start = 0\n        count = 0\n        while True:\n            start = s.find(string, start)\n            if start == -1:\n                break\n            count += 1\n            start += 1\n        \n        #Score    \n        if string[0] in vowels:\n            score_p2_vow += count\n            history_p2.append((string, count))\n        else:\n            score_p1_con += count\n            history_p1.append((string, count))\n            \n    #Score\n    if score_p1_con \u003e score_p2_vow:\n        print(p1_name,score_p1_con)\n        #print(history_p1)\n    else:\n        print(p2_name,score_p2_vow)\n        #print(history_p2)\n\n",
            "score": 0.006373117034,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "The Minion Game",
            "code": "vowels = ['A','E','I','O','U']\n\ndef minion_game(s):\n    p1_name , p2_name = 'Stuart' , 'Kevin'\n    score_p1_con , score_p2_vow = 0 , 0\n    history_p1 , history_p2 = [] , []\n    \n    aux_string = list(s.upper())\n    slice_str = set()\n    \n    # Sliced strings\n    for i in range(len(aux_string)):\n        sub_tring = ''.join(aux_string[i:])\n        slice_str.add(sub_tring)\n        for j in range(i+1,len(aux_string)+1):\n            sub_tring = ''.join(aux_string[i:j])\n            slice_str.add(sub_tring)\n    \n    for string in slice_str:\n        #Verify occurrences\n        start = 0\n        count = 0\n        while True:\n            start = s.find(string, start)\n            if start == -1:\n                break\n            count += 1\n            start += 1\n        \n        #Score    \n        if string[0] in vowels:\n            score_p2_vow += count\n            history_p2.append((string, count))\n        else:\n            score_p1_con += count\n            history_p1.append((string, count))\n            \n    #Score\n    if score_p1_con \u003e score_p2_vow:\n        print(p1_name,score_p1_con)\n        #print(history_p1)\n    elif score_p1_con \u003c score_p2_vow:\n        print(p2_name,score_p2_vow)\n        #print(history_p2)\n    else:\n        print('Draw')\n        \n",
            "score": 0.012166859791,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "The Minion Game",
            "code": "vowels = ['A','E','I','O','U']\n\ndef minion_game(s):\n    vowels = 'AEIOU'\n    s = s.upper()\n\n    p1_name, p2_name = 'Stuart', 'Kevin'\n    score_p1_con, score_p2_vow = 0, 0\n    \n    for i in range(len(s)):\n        score = len(s) - i\n        if s[i] in vowels:\n            score_p2_vow += score\n        else:\n            score_p1_con += score\n\n    # Exibir o vencedor\n    if score_p1_con \u003e score_p2_vow:\n        print(p1_name, score_p1_con)\n    elif score_p1_con \u003c score_p2_vow:\n        print(p2_name, score_p2_vow)\n    else:\n        print('Draw')\n        \n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Merge the Tools!",
            "code": "def merge_the_tools(string, k):\n    \n    for i in range(0,len(string),k):\n        sub_string = string[i:i+k]\n        aux_list = list(sub_string)\n        \n        for j in range(len(sub_string)-1):\n            if sub_string[j] == sub_string[j+1]:\n                aux_list.pop(j)\n        print(''.join(aux_list[:k-1]))\n       \n    \n\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Calendar Module",
            "code": "import calendar\n\ndef name_day(day , month , year):\n    index = calendar.weekday(int(year), int(month), int(day))\n    print(calendar.day_name[index].upper())\n    \nif __name__ ==  '__main__':\n    ##MM DD YYYY\n    month, day , year  = input().split()\n    name_day(day , month , year)\n\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Calendar Module",
            "code": "import calendar\n\ndef name_day(day , month , year):\n    index = calendar.weekday(int(year), int(month), int(day))\n    print(calendar.day_name[index].upper())\n    \nif __name__ ==  '__main__':\n    ##MM DD YYYY\n    month, day , year  = input().split()\n    name_day(day , month , year)\n\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Time Delta",
            "code": "#!/bin/python3\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the time_delta function below.\ndef time_delta(t1, t2):\n    day_string1 , day1 , month1 , year1 , hour1 , utc1 = t1.split()\n    day_string2 , day2 , month2 , year2 , hour2 , utc2 = t2.split()\n    \n    utc1_hour , utc1_minute = utc1[:3] , utc1[3:]\n    utc2_hour , utc2_minute = utc2[:3] , utc2[3:]\n    \n    print(utc1_hour,utc1_minute)\n    print(utc2_hour,utc2_minute)\n    \n    delta = int(utc1_hour) * 3600 + int(utc1_minute) * 60\n    \n    return str(delta)\n    \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        t1 = input()\n\n        t2 = input()\n\n        delta = time_delta(t1, t2)\n\n        fptr.write(delta + '\\n')\n\n    fptr.close()\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "itertools.product()",
            "code": "from itertools import product\n\ndef product_mtx(a,b):\n    prod = list(product(*[a,b]))\n    return \" \".join(f\"({x}, {y})\" for x, y in prod)\n    \nif __name__ == '__main__':\n    a =  input().split()\n    b =  input().split()\n    \n    print(product_mtx(a,b))\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "itertools.permutations()",
            "code": "from itertools import permutations\n\ndef permutations_tool(promt):\n    string , r = prompt\n    \n    permut_list = list(permutations(string,int(r)))\n    for elem1, elem2 in permut_list:\n        print(f'{elem1}{elem2}')\n    \n\nif __name__ == '__main__':\n    prompt = tuple(input().split())\n    permutations_tool(prompt)\n    \n",
            "score": 0.2,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "itertools.permutations()",
            "code": "from itertools import permutations\n\ndef permutations_tool(promt):\n    string , r = prompt\n    \n    permut_list = list(permutations(string,int(r)))\n    permut_list.sort()\n    for elem1, elem2 in permut_list:\n        print(f'{elem1}{elem2}')\n    \n\nif __name__ == '__main__':\n    prompt = tuple(input().split())\n    permutations_tool(prompt)\n    \n",
            "score": 0.2,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "itertools.permutations()",
            "code": "from itertools import permutations\n\ndef permutations_tool(promt):\n    string , r = prompt\n    \n    permut_list = list(permutations(string,int(r)))\n    permut_list.sort()\n    for elem in permut_list:\n        print(''.join(elem))\n    \n\nif __name__ == '__main__':\n    prompt = tuple(input().split())\n    permutations_tool(prompt)\n    \n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "itertools.permutations()",
            "code": "from itertools import permutations\n\ndef permutations_tool(promt):\n    string , r = prompt\n    \n    permut_list = list(permutations(string,int(r)))\n    permut_list.sort()\n    for elem in permut_list:\n        print(''.join(elem))\n    \n\nif __name__ == '__main__':\n    prompt = tuple(input().split())\n    permutations_tool(prompt)\n    \n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "itertools.combinations()",
            "code": "from itertools import combinations\n\ndef comb_func(prompt):\n    string , r = prompt\n    \n    string = list(string)\n    string.sort()\n    \n    comb_list = []\n    for i in range(1,int(r)+1):\n        comb_list+= list(combinations(string,int(i)))\n    \n    for elem in comb_list:\n        print(''.join(elem))\n    \n\nif __name__ ==  '__main__':\n    prompt = tuple(input().split())\n    comb_func(prompt)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "itertools.combinations_with_replacement()",
            "code": "from itertools import combinations_with_replacement\n\ndef comb_with_replace(prompt):\n    string , r = prompt\n    \n    lex_string = list(string)\n    lex_string.sort()\n    \n    rep_list = list(combinations_with_replacement(lex_string,int(r)))\n    \n    for elem in rep_list:\n        print(''.join(elem))\n    \nif __name__ == '__main__':\n    prompt = tuple(input().split())\n    comb_with_replace(prompt)\n    \n    \n    \n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Compress the String! ",
            "code": "from itertools import groupby\n\ndef compress_stirng(prompt):\n    \n    group_tuples = []\n    for elem ,qty in groupby(prompt):\n        element = elem\n        qty = len(list(qty))\n        group_tuples.append((qty,element))\n    print(' '.join(f'({x}, {y})' for x,y in group_tuples))\n    \nif __name__ == '__main__':\n    prompt = input()\n    compress_stirng(prompt)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Compress the String! ",
            "code": "from itertools import groupby\n\ndef compress_stirng(prompt):\n    \n    group_tuples = []\n    for elem ,qty in groupby(prompt):\n        qty = len(list(qty))\n        group_tuples.append((qty,elem))\n    print(' '.join(f'({x}, {y})' for x,y in group_tuples))\n    \nif __name__ == '__main__':\n    prompt = input()\n    compress_stirng(prompt)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Iterables and Iterators",
            "code": "from itertools import combinations\n\ndef possibilities(string,k):\n    comb_list = list(combinations(string,k))\n    #print(comb_list)\n    \n    count = 0\n    for tuple_elem in comb_list:\n        elem1 , elem2 = tuple_elem\n        if elem1 == string[0]:\n            count+=1\n    result = count/len(comb_list)\n    print(f'{result:.4f}')\n\nif __name__ == '__main__':\n    n  = input()\n    string = ''.join(input().split())\n    k = int(input())\n    \n    possibilities(string,k)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Iterables and Iterators",
            "code": "from itertools import combinations\n\ndef possibilities(string,k):\n    comb_list = list(combinations(string,k))\n    #print(comb_list)\n    \n    count = 0\n    for elem in comb_list:\n        if elem[0] == string[0]:\n            count+=1\n    result = count/len(comb_list)\n    print(f'{result:.4f}')\n\nif __name__ == '__main__':\n    n  = input()\n    string = ''.join(input().split())\n    k = int(input())\n    \n    possibilities(string,k)\n",
            "score": 0.363636363636,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Iterables and Iterators",
            "code": "from itertools import combinations\n\ndef possibilities(string,k):\n    comb_list = list(combinations(string,k))\n    #print(comb_list)\n    \n    count = 0\n    for elem in comb_list:\n        if string[0] in elem:\n            count+=1\n    result = count/len(comb_list)\n    print(f'{result:.4f}')\n\nif __name__ == '__main__':\n    n  = input()\n    string = ''.join(input().split())\n    k = int(input())\n    \n    possibilities(string,k)\n",
            "score": 0.818181818182,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Iterables and Iterators",
            "code": "from itertools import combinations\n\ndef possibilities(string,k):\n    comb_list = list(combinations(string,k))\n    #print(comb_list)\n    \n    count = 0\n    for elem in comb_list:\n        #Check first element of string on elem\n        if 'a' in elem:\n            count+=1\n    result = count/len(comb_list)\n    print(f'{result:.4f}')\n\nif __name__ == '__main__':\n    n  = input()\n    string = ''.join(input().split())\n    k = int(input())\n    \n    possibilities(string,k)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Iterables and Iterators",
            "code": "from itertools import combinations\n\ndef possibilities(string,k):\n    comb_list = list(combinations(string,k))\n    #print(comb_list)\n    \n    count = 0\n    for elem in comb_list:\n        #Check first element of string on elem\n        #or Check 'char'\n        if 'a' in elem:\n            count+=1\n    result = count/len(comb_list)\n    print(f'{result:.4f}')\n\nif __name__ == '__main__':\n    n  = input()\n    string = ''.join(input().split())\n    k = int(input())\n    \n    possibilities(string,k)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Iterables and Iterators",
            "code": "from itertools import combinations\n\ndef possibilities(string,k):\n    comb_list = list(combinations(string,k))\n    #print(comb_list)\n    \n    count = 0\n    for elem in comb_list:\n        #Check first element of string on elem\n        if string[0] in elem:\n            count+=1\n    result = count/len(comb_list)\n    print(f'{result:.4f}')\n\nif __name__ == '__main__':\n    n  = input()\n    string = ''.join(input().split())\n    k = int(input())\n    \n    possibilities(string,k)\n",
            "score": 0.818181818182,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Iterables and Iterators",
            "code": "from itertools import combinations\n\ndef possibilities(string,k):\n    comb_list = list(combinations(string,k))\n    #print(comb_list)\n    \n    count = 0\n    for elem in comb_list:\n        #Check first element of string on elem\n        #or Check 'char'\n        if 'a' in elem:\n            count+=1\n    result = count/len(comb_list)\n    print(f'{result:.4f}')\n\nif __name__ == '__main__':\n    n  = input()\n    string = ''.join(input().split())\n    k = int(input())\n    \n    possibilities(string,k)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Maximize It!",
            "code": "def maxize_it(lst):\n    out = 0\n    for i in range(1,len(lst)):\n        lista_int = [int(x) for x in lst[i]]\n        max_value = max(lista_int)\n        out+= max_value**2\n    print(out)\n\n\nif __name__ == '__main__':\n    lst = [input().split() for i in range(4)]\n    maxize_it(lst)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Maximize It!",
            "code": "def maxize_it(lst):\n    module = lst[0][1]\n    \n    out = 0\n    for i in range(1,len(lst)):\n        lista_int = [int(x) for x in lst[i]]\n        max_value = max(lista_int)\n        out+= max_value**2\n    print(out % int(module))\n\n\nif __name__ == '__main__':\n    lst = [input().split() for i in range(4)]\n    maxize_it(lst)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Maximize It!",
            "code": "from itertools import product\n\ndef maxize_it(lst,module):\n    \n    #Convert string in int\n    list_int = []\n    for i in range(len(lst)):\n        sublist_int = list(map(int, lst[i][1:]))\n        list_int.append(sublist_int)\n        \n    max_val = 0\n    for combination in product(*list_int):\n        sum_quares = sum(x ** 2 for x in combination)\n        value = sum_quares % module\n        \n        if value \u003e max_val:\n            max_val = value\n        \n    print(max_val)\n\n\nif __name__ == '__main__':\n    k , module = map(int, input().split())\n    lst = [input().split() for i in range(k)]\n    maxize_it(lst,module)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Re.split()",
            "code": "regex_pattern = r\"[,.]\"\t# Do not delete 'r'.\n\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Group(), Groups() \u0026 Groupdict()",
            "code": "import re\n\ndef first_rep(string):\n    pattern = r\"(\\w)\\1\"\n    \n    m = re.search(pattern,string)\n    \n    if m.group(0):\n        return m.group(0)[0]\n    else:\n        return '-1'\n        \nif __name__ == '__main__':\n    string = input()\n    print(first_rep(string))\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Group(), Groups() \u0026 Groupdict()",
            "code": "import re\n\ndef first_rep(string):\n    pattern = r\"(\\w)\\1\"\n    \n    m = re.search(pattern,string)\n    \n    if m is not None:\n        return m.group(0)[0]\n    else:\n        return '-1'\n        \nif __name__ == '__main__':\n    string = input()\n    print(first_rep(string))\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Group(), Groups() \u0026 Groupdict()",
            "code": "import re\n\ndef first_rep(string):\n    pattern = r\"(\\d)\\1\"\n    \n    m = re.search(pattern,string)\n    \n    if m is not None:\n        return m.group(0)[0]\n    else:\n        return '-1'\n        \nif __name__ == '__main__':\n    string = input()\n    print(first_rep(string))\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Group(), Groups() \u0026 Groupdict()",
            "code": "import re\n\ndef first_rep(string):\n    pattern = r\"([a-zA-Z0-9])\\1\"\n    \n    m = re.search(pattern,string)\n    \n    if m is not None:\n        return m.group(0)[0]\n    else:\n        return '-1'\n        \nif __name__ == '__main__':\n    string = input()\n    print(first_rep(string))\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Re.findall() \u0026 Re.finditer()",
            "code": "import re\n\ndef finder(pattern,string):\n    results = re.findall(pattern,string)\n    \n    if results is not None:\n        for elem in results:\n            print(elem)\n    else:\n        print('-1')  \n\nif __name__ == '__main__':\n    string = input()\n    pattern = r\"([aeiouAEIOU]{2,})\"\n    finder(pattern,string)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Re.findall() \u0026 Re.finditer()",
            "code": "import re\n\ndef finder(pattern,string):\n    results = re.findall(pattern,string)\n    \n    if results is not None:\n        for elem in results:\n            print(elem)\n    else:\n        print('-1')  \n\nif __name__ == '__main__':\n    string = input()\n    pattern = r\"([aeiouAEIOU]{2,})\"\n    finder(pattern,string)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Re.findall() \u0026 Re.finditer()",
            "code": "import re\n\ndef finder(pattern,string):\n    results = re.findall(pattern,string)\n    \n    if results:\n        for elem in results:\n            print(elem)\n    else:\n        print('-1')  \n\nif __name__ == '__main__':\n    string = input()\n    pattern = r\"([aeiouAEIOU]{2,})\"\n    finder(pattern,string)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Re.findall() \u0026 Re.finditer()",
            "code": "import re\n\ndef finder(pattern,string):\n    results = re.findall(pattern,string)\n    \n    if results:\n        for elem in results:\n            print(elem)\n    else:\n        print('-1')  \n\nif __name__ == '__main__':\n    string = input()\n    pattern = r\"(?\u003c=[^aeiouAEIOU])([aeiouAEIOU]{2,})(?=[^aeiouAEIOU])\"\n    finder(pattern,string)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Merge the Tools!",
            "code": "def merge_the_tools(string, k):\n    \n    for i in range(0,len(string),k):\n        sub_string = string[i:i+k]\n        aux_list = list(sub_string)\n        \n        for j in range(len(sub_string)-1):\n            if sub_string[j] == sub_string[j+1]:\n                aux_list.pop(j)\n        print(''.join(aux_list[:k-1]))\n       \n    \n\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Merge the Tools!",
            "code": "def merge_the_tools(string, k):\n    \n    pattern = r\"([A-Z])\\1+\"\n    sub_pattern = r\"\\1\"\n    \n    for i in range(0,len(string),k):\n        sub_string = ''.join(string[i:i+k])\n        \n        seen = []\n        for char in sub_string:\n            if char not in seen:\n                seen.append(char)\n        print(''.join(seen))\n        \n    \n\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Merge the Tools!",
            "code": "def merge_the_tools(string, k):\n\n    for i in range(0,len(string),k):\n        sub_string = ''.join(string[i:i+k])\n        \n        seen = []\n        for char in sub_string:\n            if char not in seen:\n                seen.append(char)\n        print(''.join(seen))\n        \n    \n\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Detect Floating Point Number",
            "code": "import re\n\ndef chk_float(string):\n    patern = r\"(?\u003c![+-])[+-]\\d+\\.\\d+\"\n    return print(bool(re.findall(patern,string)))\n\nif __name__ == \"__main__\":\n    for _ in range(int(input())):\n        chk_float(input())\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Detect Floating Point Number",
            "code": "import re\n\ndef chk_float(string):\n    patern = r\"(?\u003c![+-])[+-]\\d+\\.\\d+\"\n    return print(bool(re.findall(patern,string)))\n\nif __name__ == \"__main__\":\n    for _ in range(int(input())):\n        chk_float(input())\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Detect Floating Point Number",
            "code": "import re\n\ndef chk_float(string):\n    patern = r\"^[+-]?\\d+\\.\\d+$\"\n    return print(bool(re.findall(patern,string)))\n\nif __name__ == \"__main__\":\n    for _ in range(int(input())):\n        chk_float(input())\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Detect Floating Point Number",
            "code": "import re\n\ndef chk_float(string):\n    patern = r\"^[+-]?(\\d*\\.\\d+|\\.\\d+)$\"\n    return print(bool(re.findall(patern,string)))\n\nif __name__ == \"__main__\":\n    for _ in range(int(input())):\n        chk_float(input())\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Re.start() \u0026 Re.end()",
            "code": "import re\n\ndef start_end(string,see):\n    \n    indexes = set()\n    for i in range(len(string)-1):\n        new_string = ''.join(string[i:])\n        \n        m = re.search(see,str(new_string))\n        \n        rest = len(string[:i])\n        index_start = m.start()+rest\n        index_end = m.end()+rest-1\n        \n        indexes.add((index_start,index_end))\n    \n    list_sort = list(indexes)\n    list_sort.sort()\n    for _ in list_sort:\n        print(_)\n\nif __name__ == '__main__':\n    s = input()\n    k = input()\n    \n    start_end(s,k)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Re.start() \u0026 Re.end()",
            "code": "import re\n\ndef start_end(string,see):\n    \n    indexes = set()\n    for i in range(len(string)-1):\n        new_string = ''.join(string[i:])\n        \n        m = re.search(see,str(new_string))\n        \n        rest = len(string[:i])\n        \n        try:\n            index_start = m.start()+rest\n            index_end = m.end()+rest-1\n        except:\n            index_start = -1\n            index_end = -1\n    \n        indexes.add((index_start,index_end))\n    \n    list_sort = list(indexes)\n    list_sort.sort()\n    for _ in list_sort:\n        print(_)\n\nif __name__ == '__main__':\n    s = input()\n    k = input()\n    \n    start_end(s,k)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Re.start() \u0026 Re.end()",
            "code": "import re\n\ndef start_end(string,see):\n    \n    indexes = set()\n    for i in range(len(string)-1):\n        new_string = ''.join(string[i:])\n        \n        m = re.search(see,str(new_string))\n        \n        if m:\n            rest = len(string[:i])\n            index_start = m.start()+rest\n            index_end = m.end()+rest-1\n        \n            indexes.add((index_start,index_end))\n            \n    list_sort = list(indexes)\n    list_sort.sort()\n    if list_sort:\n        for _ in list_sort:\n            print(_)\n    else:\n        print((-1, -1))\n\nif __name__ == '__main__':\n    s = input()\n    k = input()\n    \n    start_end(s,k)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Re.start() \u0026 Re.end()",
            "code": "import re\n\ndef start_end(string,see):\n    \n    matches = re.finditer(f\"(?=({see}))\",string)\n    \n    if matches:\n        for _ in matches:\n            print((_.start(),_.end()+1))\n    else:\n        print((-1, -1))\n        \n    \n\nif __name__ == '__main__':\n    s = input()\n    k = input()\n    \n    start_end(s,k)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Re.start() \u0026 Re.end()",
            "code": "import re\n\ndef start_end(string,see):\n    \n    matches = re.finditer(see,string)\n    if matches:\n        for _ in matches:\n            print((_.start(),_.end()-1))\n    else:\n        print((-1, -1))\n        \n    \n\nif __name__ == '__main__':\n    s = input()\n    k = input()\n    \n    start_end(s,k)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Re.start() \u0026 Re.end()",
            "code": "import re\n\ndef start_end(string,see):\n    \n    matches = re.finditer(f\"(?=({see}))\",string)\n    if matches:\n        for _ in matches:\n            print((_.end(), _.start() + len(see) - 1 ))\n    else:\n        print((-1, -1))\n        \nif __name__ == '__main__':\n    s = input()\n    k = input()\n    \n    start_end(s,k)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Re.start() \u0026 Re.end()",
            "code": "import re\n\ndef start_end(string,see):\n    \n    matches = list(re.finditer(f\"(?=({see}))\",string))\n    \n    if matches:\n        for _ in matches:\n            print((_.start, _.start() + len(see) - 1 ))\n    else:\n        print((-1, -1))\n        \nif __name__ == '__main__':\n    s = input()\n    k = input()\n    \n    start_end(s,k)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Re.start() \u0026 Re.end()",
            "code": "import re\n\ndef start_end(string,see):\n    \n    matches = list(re.finditer(f\"(?=({see}))\",string))\n    \n    if matches:\n        for _ in matches:\n            print((_.end(), _.start() + len(see) - 1 ))\n    else:\n        print((-1, -1))\n        \nif __name__ == '__main__':\n    s = input()\n    k = input()\n    \n    start_end(s,k)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "collections.Counter()",
            "code": "from collections import Counter\n\ndef sum_orders(orders,shoes):\n    c = Counter(orders)\n    \n    earned = 0\n    for shoe , price in set(c):\n        if shoe in shoes:\n            earned+=int(price)\n    print(earned)\n    \nif __name__ == '__main__':\n    n_shoes = int(input())\n    shoes = input().split()\n    n_costumers =  int(input())\n    \n    orders = []\n    for _ in range(n_costumers):\n        size , price = input().split()\n        orders.append((size,price))\n    \n    sum_orders(orders,shoes)\n    \n",
            "score": 0.4,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "collections.Counter()",
            "code": "from collections import Counter\n\ndef sum_orders(orders,stock):\n    stock = Counter(stock)\n    \n    cash_earned = 0\n    for shoes , price in orders:\n        if stock[shoes] \u003e 0:\n            stock[shoes]-=1\n            cash_earned+=int(price)\n            \n    print(cash_earned)\n        \nif __name__ == '__main__':\n    n_shoes = int(input())\n    shoes_stock = input().split()\n    n_costumers =  int(input())\n    \n    orders = []\n    for _ in range(n_costumers):\n        size , price = input().split()\n        orders.append((size,price))\n    \n    sum_orders(orders,shoes_stock)\n    \n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "collections.Counter()",
            "code": "from collections import Counter\n\ndef sum_orders(orders,stock):\n    stock = Counter(stock)\n    \n    cash_earned = 0\n    for shoes , price in orders:\n        if stock[shoes] \u003e 0:\n            stock[shoes]-=1\n            cash_earned+=int(price)\n            \n    print(cash_earned)\n        \nif __name__ == '__main__':\n    n_shoes = int(input())\n    shoes_stock = input().split()\n    n_costumers =  int(input())\n    \n    orders = []\n    for _ in range(n_costumers):\n        size , price = input().split()\n        orders.append((size,price))\n    \n    sum_orders(orders,shoes_stock)\n    \n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Introduction to Sets",
            "code": "def average(array):\n    aux = set(array)\n    return(sum(aux)/len(aux))\n\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Symmetric Difference",
            "code": "def symetric(a,b):\n    new_set = set()\n    new_set.update(b.difference(a))\n    new_set.update(a.difference(b))\n    \n    order_set = sorted(new_set)\n    for item in order_set:\n        print(item)\n    \nif __name__ == '__main__':\n    m_size = int(input())\n    m = set(map(int ,input().split()))\n    n_size = int(input())\n    n = set(map(int ,input().split()))\n    \n    symetric(m,n)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Symmetric Difference",
            "code": "def symetric_diff(a,b):\n    new_set = set()\n    new_set.update(b.difference(a))\n    new_set.update(a.difference(b))\n    \n    order_set = sorted(new_set)\n    for item in order_set:\n        print(item)\n    \nif __name__ == '__main__':\n    m_size = int(input())\n    m = set(map(int ,input().split()))\n    n_size = int(input())\n    n = set(map(int ,input().split()))\n    \n    symetric_diff(m,n)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "No Idea!",
            "code": "def rabbit_hole(comp,a,b):\n    hapiness = 0\n    for elem in comp:\n        if elem in a:\n            hapiness+=1\n        elif elem in b:\n            hapiness-=1\n    print(hapiness)\n\nif __name__ ==  '__main__':\n    prompt = input().split()\n    n_integers = input().split()\n    #M\n    a_integers = input().split()\n    b_integers = input().split()\n    \n    rabbit_hole(n_integers,a_integers,b_integers)\n",
            "score": 0.428571428571,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "No Idea!",
            "code": "def rabbit_hole(comp,a,b):\n    hapiness = 0\n    for elem in comp:\n        if elem in a:\n            hapiness+=1\n        elif elem in b:\n            hapiness-=1\n    print(hapiness)\n\nif __name__ ==  '__main__':\n    prompt = input().split()\n    n_integers = set(input().split())\n    #M\n    a_integers = set(input().split())\n    b_integers = set(input().split())\n    \n    rabbit_hole(n_integers,a_integers,b_integers)\n",
            "score": 0.285714285714,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "No Idea!",
            "code": "def rabbit_hole(comp,a,b):\n    hapiness = 0\n    for elem in comp:\n        if elem in a:\n            hapiness+=1\n        elif elem in b:\n            hapiness-=1\n    print(hapiness)\n\nif __name__ ==  '__main__':\n    prompt = input().split()\n    n_integers = input().split()\n    #M\n    a_integers = set(input().split())\n    b_integers = set(input().split())\n    \n    rabbit_hole(n_integers,a_integers,b_integers)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Set .add() ",
            "code": "if __name__ == '__main__':\n    input_lines = int(input())\n    arr_countries =set()\n    for _ in range(input_lines):\n        arr_countries.add(input())\n    print(len(arr_countries))\n        \n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Set .discard(), .remove() \u0026 .pop()",
            "code": "def cmd_py(lst,commands):\n    \n    for script in commands:\n        if len(script) == 1:\n            command = script[0]\n            getattr(lst,command)()\n        else:\n            command , key = script\n            getattr(lst, command)(int(key))\n    \n    for _ in lst:\n        print(_)  \n    \nif __name__ == '__main__':\n    \n    size_set = int(input())\n    lst = set(map(int, input().split()))\n    \n    lines_commands = int(input())\n    \n    commands = []\n    for _ in range(lines_commands):\n        commands.append(tuple(input().split()))\n    cmd_py(lst,commands)\n",
            "score": 0.4,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Set .discard(), .remove() \u0026 .pop()",
            "code": "def cmd_py(lst,commands):\n    \n    for script in commands:\n        if len(script) == 1:\n            command = script[0]\n            getattr(lst,command)()\n        else:\n            command , key = script\n            getattr(lst, command)(int(key))\n    \n    print(sum(lst))\n    \nif __name__ == '__main__':\n    \n    size_set = int(input())\n    lst = set(map(int, input().split()))\n    \n    lines_commands = int(input())\n    \n    commands = []\n    for _ in range(lines_commands):\n        commands.append(tuple(input().split()))\n    cmd_py(lst,commands)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Set .union() Operation",
            "code": "def news_qty(list_a,list_b):\n    return len(list_a.union(list_b))\n\n\nif __name__ == '__main__':\n    len_list_a = int(input())\n    list_a = set(map(int, input().split()))\n    len_list_b = int(input())\n    list_b = set(map(int, input().split()))\n    \n    print(news_qty(list_a,list_b))\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Set .intersection() Operation",
            "code": "def news_qty(list_a,list_b):\n    return len(list_a.intersection(list_b))\n\n\nif __name__ == '__main__':\n    len_list_a = int(input())\n    list_a = set(map(int, input().split()))\n    len_list_b = int(input())\n    list_b = set(map(int, input().split()))\n    \n    print(news_qty(list_a,list_b))\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Set .difference() Operation",
            "code": "def news_qty(list_a,list_b):\n    return len(list_a.difference(list_b))\n\n\nif __name__ == '__main__':\n    len_list_a = int(input())\n    list_a = set(map(int, input().split()))\n    len_list_b = int(input())\n    list_b = set(map(int, input().split()))\n    \n    print(news_qty(list_a,list_b))\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Set .symmetric_difference() Operation",
            "code": "def news_qty(list_a,list_b):\n    return len(list_a.symmetric_difference(list_b))\n\n\nif __name__ == '__main__':\n    len_list_a = int(input())\n    list_a = set(map(int, input().split()))\n    len_list_b = int(input())\n    list_b = set(map(int, input().split()))\n    \n    print(news_qty(list_a,list_b))\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Set Mutations",
            "code": "def cmd_py(set_a,scripts):\n    \n    for script in scripts:\n        tpl_command , set_aux = script\n        command , _ = tpl_command\n        getattr(set_a, command)(set_aux)\n\n    return sum(set_a)\n\nif __name__ == '__main__':\n    len_set_a = int(input())\n    set_a = set(map(int, input().split()))\n    \n    qty_operation_set = int(input())\n    \n    script = []\n    for _ in range(qty_operation_set):\n        command = tuple(input().split())\n        set_x = set(map(int, input().split()))\n        script.append((command,set_x))\n    \n    print(cmd_py(set_a,script))\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Set Mutations",
            "code": "def cmd_py(set_a,scripts):\n    \n    for script in scripts:\n        tpl_command , set_aux = script\n        command , _ = tpl_command\n        getattr(set_a, command)(set_aux)\n\n    return sum(set_a)\n\nif __name__ == '__main__':\n    len_set_a = int(input())\n    set_a = set(map(int, input().split()))\n    \n    qty_operation_set = int(input())\n    \n    script = []\n    for _ in range(qty_operation_set):\n        command = tuple(input().split())\n        set_x = set(map(int, input().split()))\n        script.append((command,set_x))\n    \n    print(cmd_py(set_a,script))\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "The Captain's Room ",
            "code": "from collections import Counter\n\ndef whitch_room(num_room,rooms):\n    counter_rooms = Counter(rooms)\n    reversed_rooms = list(reversed(counter_rooms.most_common()))\n    room , _ = reversed_rooms[0]\n    return room\n\nif __name__ ==  '__main__':\n    num_room = int(input())\n    rooms = map(int, input().split())\n    print(whitch_room(num_room,rooms))\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "The Captain's Room ",
            "code": "from collections import Counter\n\ndef whitch_room(num_room,rooms):\n    counter_rooms = Counter(rooms)\n    reversed_rooms = list(reversed(counter_rooms.most_common()))\n    room , _ = reversed_rooms[0]\n    return room\n\nif __name__ ==  '__main__':\n    num_room = int(input())\n    rooms = map(int, input().split())\n    print(whitch_room(num_room,rooms))\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "The Captain's Room ",
            "code": "from collections import Counter\n\ndef whitch_room(num_room,rooms):\n    counter_rooms = Counter(rooms)\n    for room, count in counter_rooms.items():\n        if count == 1:\n            return room\n\nif __name__ ==  '__main__':\n    num_room = int(input())\n    rooms = map(int, input().split())\n    print(whitch_room(num_room,rooms))\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Check Subset",
            "code": "def is_subset(set_a,set_b):\n    return set_a.issubset(set_b)\n\nif __name__ ==  '__main__':\n    qty_test = int(input())\n    \n    for _ in range(qty_test):\n        len_a = int(input())\n        set_a = set(map(int ,input().split()))\n        len_b = int(input())\n        set_b = set(map(int ,input().split()))\n        \n        print(is_subset(set_a,set_b))\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Check Strict Superset",
            "code": "def check_superset(set_a,other_set):\n    return other_set.issubset(set_a)\n\nif __name__ == '__main__':\n    set_a = set(map(int, input().split()))\n    qty_sets = int(input())\n    \n    list_sets = []\n    for _ in range(qty_sets):\n        other_set = set(map(int, input().split()))\n        bool_check = check_superset(set_a, other_set)\n        if bool_check:\n           None\n        else:\n            print(bool_check)\n            break \n        \n",
            "score": 0.6,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Check Strict Superset",
            "code": "def check_superset(set_a,other_set):\n    return other_set.issubset(set_a)\n\nif __name__ == '__main__':\n    set_a = set(input().split())\n    qty_sets = int(input())\n    \n    list_sets = []\n    for _ in range(qty_sets):\n        other_set = set(input().split())\n        bool_check = check_superset(set_a, other_set)\n        if bool_check:\n           None\n        else:\n            print(bool_check)\n            break \n        \n",
            "score": 0.6,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Check Strict Superset",
            "code": "def check_superset(set_a,other_set):\n    return other_set.issubset(set_a)\n\nif __name__ == '__main__':\n    set_a = set(map(int, input().split()))\n    qty_sets = int(input())\n    \n    list_sets = []\n    for _ in range(qty_sets):\n        other_set = set(map(int, input().split()))\n        bool_check = check_superset(set_a, other_set)\n        if not bool_check:\n            print(bool_check)\n            break \n        \n",
            "score": 0.6,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Check Strict Superset",
            "code": "def check_superset(set_a,other_set):\n    return other_set.issubset(set_a)\n\nif __name__ == '__main__':\n    set_a = set(map(int, input().split()))\n    qty_sets = int(input())\n    \n    list_sets = []\n    for _ in range(qty_sets):\n        other_set = set(map(int, input().split()))\n        bool_check = check_superset(set_a, other_set)\n        if not bool_check:\n            all_superset = False\n            print(all_superset)\n            break \n        \n",
            "score": 0.6,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Check Strict Superset",
            "code": "def check_superset(set_a,other_set):\n    return other_set.issubset(set_a)\n\nif __name__ == '__main__':\n    set_a = set(map(int, input().split()))\n    qty_sets = int(input())\n\n    bool_check = True\n    for _ in range(qty_sets):\n        other_set = set(map(int, input().split()))\n        bool_check = check_superset(set_a, other_set)\n        \n        if not bool_check:\n            print(bool_check)\n            break \n        \n",
            "score": 0.6,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Check Strict Superset",
            "code": "def check_superset(set_a,other_set):\n    return other_set.issubset(set_a)\n\nif __name__ == '__main__':\n    set_a = set(map(int, input().split()))\n    qty_sets = int(input())\n\n    all_superset = True\n    for _ in range(qty_sets):\n        other_set = set(map(int, input().split()))\n        bool_check = check_superset(set_a, other_set)\n        \n        if not bool_check:\n            all_superset = False\n            break \n    \n    print(all_superset)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Check Strict Superset",
            "code": "def check_superset(set_a,other_set):\n    return other_set.issubset(set_a)\n\nif __name__ == '__main__':\n    set_a = set(map(int, input().split()))\n    qty_sets = int(input())\n\n    for _ in range(qty_sets):\n        other_set = set(map(int, input().split()))\n        bool_check = check_superset(set_a, other_set)\n        \n        if not bool_check:\n            bool_check = False\n            break \n    \n    print(bool_check)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Check Strict Superset",
            "code": "def check_superset(set_a,other_set):\n    return other_set.issubset(set_a)\n\nif __name__ == '__main__':\n    set_a = set(map(int, input().split()))\n    qty_sets = int(input())\n\n    for _ in range(qty_sets):\n        other_set = set(map(int, input().split()))\n        bool_check = check_superset(set_a, other_set)\n        \n        if not bool_check:\n            break \n    \n    print(bool_check)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Check Strict Superset",
            "code": "def check_superset(set_a,other_set):\n    return other_set.issubset(set_a)\n\nif __name__ == '__main__':\n    set_a = set(map(int, input().split()))\n    qty_sets = int(input())\n\n    for _ in range(qty_sets):\n        other_set = set(map(int, input().split()))\n        bool_check = check_superset(set_a, other_set)\n        if not bool_check:\n            print(bool_check)\n            break \n    \n",
            "score": 0.6,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Check Strict Superset",
            "code": "def check_superset(set_a,other_set):\n    return other_set.issubset(set_a)\n\nif __name__ == '__main__':\n    set_a = set(map(int, input().split()))\n    qty_sets = int(input())\n\n    for _ in range(qty_sets):\n        other_set = set(map(int, input().split()))\n        bool_check = check_superset(set_a, other_set)\n        if not bool_check:\n            break \n    print(bool_check)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Check Strict Superset",
            "code": "def check_superset(set_a,other_set):\n    return other_set.superset(set_a)\n\nif __name__ == '__main__':\n    set_a = set(map(int, input().split()))\n    qty_sets = int(input())\n\n    for _ in range(qty_sets):\n        other_set = set(map(int, input().split()))\n        bool_check = check_superset(set_a, other_set)\n        if not bool_check:\n            break \n    print(bool_check)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Check Strict Superset",
            "code": "def check_superset(set_a,other_set):\n    return other_set.issuperset(set_a)\n\nif __name__ == '__main__':\n    set_a = set(map(int, input().split()))\n    qty_sets = int(input())\n\n    for _ in range(qty_sets):\n        other_set = set(map(int, input().split()))\n        bool_check = check_superset(set_a, other_set)\n        if not bool_check:\n            break \n    print(bool_check)\n",
            "score": 0.6,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Check Strict Superset",
            "code": "def check_superset(set_a,other_set):\n    return set_a.issuperset(other_set)\n\nif __name__ == '__main__':\n    set_a = set(map(int, input().split()))\n    qty_sets = int(input())\n\n    for _ in range(qty_sets):\n        other_set = set(map(int, input().split()))\n        bool_check = check_superset(set_a, other_set)\n        if not bool_check:\n            break \n    print(bool_check)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Polar Coordinates",
            "code": "from cmath import phase\n\ndef complex_numbers(tpl_values):\n    abs_part = abs(complex(1.0, 2.0))\n    phase_part = phase(complex(1.0, 2.0))\n    \n    return f'{abs_part}\\n{phase_part}'\n\nif __name__ == '__main__':\n    values = tuple(input().split('+'))\n    real , img = values\n    print(complex_numbers((real,img.replace('j',''))))\n    \n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Polar Coordinates",
            "code": "from cmath import phase\n\ndef complex_numbers(tpl_values):\n    abs_part = abs(complex(1.0, 2.0))\n    phase_part = phase(complex(1.0, 2.0))\n    \n    return f'{abs_part:.3f}\\n{phase_part:.3f}'\n\nif __name__ == '__main__':\n    values = tuple(input().split('+'))\n    real , img = values\n    print(complex_numbers((real,img.replace('j',''))))\n    \n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Polar Coordinates",
            "code": "from cmath import phase\nimport re\n\ndef complex_numbers(tpl_values):\n    abs_part = abs(complex(1.0, 2.0))\n    phase_part = phase(complex(1.0, 2.0))\n    \n    return f'{abs_part:.3f}\\n{phase_part:.3f}'\n\nif __name__ == '__main__':\n    values = tuple(re.split(r'\\+|\\-',input()))\n    real , img = values\n    print(complex_numbers((real,img.replace('j',''))))\n    \n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Polar Coordinates",
            "code": "from cmath import phase\nimport re\n\ndef complex_numbers(tpl_values):\n    abs_part = abs(complex(1.0, 2.0))\n    phase_part = phase(complex(1.0, 2.0))\n    \n    return f'{abs_part:.3f}\\n{phase_part:.3f}'\n\nif __name__ == '__main__':\n    re_comp = re.compile(r'(-?\\d+)([-+]\\d+j)')\n    value = re_comp.findall(input())\n    real , img = value[0]\n    \n    print(complex_numbers((real,img.replace('j',''))))\n    \n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Polar Coordinates",
            "code": "from cmath import phase\nimport re\n\ndef complex_numbers(tpl_values):\n    real, img = tpl_values\n    abs_part = abs(complex(float(real),float(img)))\n    phase_part = phase(complex(float(real),float(img)))\n    \n    return f'{abs_part:.3f}\\n{phase_part:.3f}'\n\nif __name__ == '__main__':\n    re_comp = re.compile(r'(-?\\d+)([-+]\\d+j)')\n    value = re_comp.findall(input())\n    real , img = value[0]\n    \n    print(complex_numbers((real,img.replace('j',''))))\n    \n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Find Angle MBC",
            "code": "import math\n\ndef find_angle_mbc(AB, BC):\n    theta = math.degrees(math.atan(BC / AB))\n    return round(theta)\n\nAB = int(input())\nBC = int(input())\n\nprint(f\"{find_angle_mbc(AB, BC)}°\")\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Find Angle MBC",
            "code": "import math\n\ndef find_angle_mbc(AB, BC):\n    theta = math.degrees(math.atan(BC / AB))\n    return round(theta)\n\nAB = int(input())\nBC = int(input())\n\ndegree = '\\u00B0'\nprint(f\"{find_angle_mbc(AB, BC)}{degree}\")\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Find Angle MBC",
            "code": "import math\n\ndef find_angle_mbc(AB, BC):\n    theta = math.degrees(math.atan(BC / AB))\n    return 90-round(theta)\n\nAB = int(input())\nBC = int(input())\n\ndegree = '\\u00B0'\nprint(f\"{find_angle_mbc(AB, BC)}{degree}\")\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Triangle Quest 2",
            "code": "\n\n\n\nfor i in range(1,int(input())+1):\n    print((10**i // 9) ** 2)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Mod Divmod",
            "code": "if __name__ ==  '__main__':\n    a = int(input())\n    b = int(input())\n    \n    result_a , result_b = divmod(a,b)\n    print(result_a)\n    print(result_b)\n    print((result_a,result_b))\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Mod Divmod",
            "code": "if __name__ ==  '__main__':\n    a = int(input())\n    b = int(input())\n    \n    quotient , remainder = divmod(a,b)\n    print(quotient)\n    print(remainder)\n    print((quotient,remainder))\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Power - Mod Power",
            "code": "if __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    m = int(input())\n    \n    print(pow(a,b))\n    print(pow(a,b,m))\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Integers Come In All Sizes",
            "code": "if __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    d = int(input())\n    \n    print(pow(a,b)+pow(c,d))\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Triangle Quest",
            "code": "for i in range(1,int(input())): \n    print((10 ** i // 9) * i)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "DefaultDict Tutorial",
            "code": "from collections import defaultdict\n\ndef count_group(dictionary):\n    indexes_a = []\n    indexes_b = []\n    \n    for i in range(len(dictionary['A'])):\n        for char in dictionary['B']:\n            if dictionary['A'][i] == char:\n                lst = f'indexes_{char}'\n                locals()[lst].append(i+1)\n    \n    if 'c' not in dictionary['B']:\n        print(' '.join(map(str,indexes_a)))\n        print(' '.join(map(str,indexes_b)))\n    else:\n        print(' '.join(map(str,indexes_a)))\n        print('-1')\n\n\nif __name__ ==  '__main__':\n    groups = list(map(int,input().split()))\n    group_size = sum(groups)\n    group_name = ['A','B']\n    \n    d = defaultdict(list)\n    for name,group in zip(group_name ,groups):\n        for _ in range(group):\n            aux = input()\n            d[f'{name}'].append(aux)\n    \n    count_group(d)\n    \n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "DefaultDict Tutorial",
            "code": "from collections import defaultdict\n\ndef count_group(dictionary):\n    result = defaultdict(list)\n    \n    for i in range(len(dictionary['A'])):\n        char = dictionary['A'][i]\n        result[char].append(i+1)\n        \n    for char in dictionary['B']:\n        if char in result:\n            print(' '.join(map(str,result[char])))\n        else:\n            print(-1)\n\n\nif __name__ ==  '__main__':\n    groups = list(map(int,input().split()))\n    group_size = sum(groups)\n    group_name = ['A','B']\n    \n    d = defaultdict(list)\n    for name,group in zip(group_name ,groups):\n        for _ in range(group):\n            aux = input()\n            d[f'{name}'].append(aux)\n    \n    count_group(d)\n    \n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Collections.namedtuple()",
            "code": "from collections import namedtuple\n\ndef average(list_obj):\n    sum_obj = sum(int(obj.MARKS) for obj in list_obj)\n    avg = sum_obj / len(list_obj)\n    print(f\"{avg:.2f}\")\n\nif __name__ == '__main__':\n    qty_ids = int(input())\n    names_tpl = input().split()\n    \n    Std_sheet = namedtuple('Std_sheet',names_tpl)\n    \n    aux = []\n    for _ in range(qty_ids):\n        data = input().split()\n        obj = Std_sheet(*data)\n        aux.append(obj)\n    \n    average(aux)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Collections.OrderedDict()",
            "code": "import re\n\nif __name__ ==  '__main__':\n    qty_orders = int(input())\n    pattern = r\"([A-Z ]+)( \\d+)\"\n    \n    ord_dict = {}\n    \n    for _ in range(qty_orders):\n        str_search =  re.search(pattern,input())\n        prod , price = str_search.group(1) , int(str_search.group(2))\n        \n        ord_dict[prod] = ord_dict.setdefault(prod, 0) + price\n        \n    for key_value in ord_dict.items():\n        prod , price = key_value\n        print(prod ,price)\n        \n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Collections.OrderedDict()",
            "code": "from collections import OrderedDict\n\nif __name__ == '__main__':\n    qty_orders = int(input())\n    \n    ord_dict = OrderedDict()\n    \n    for _ in range(qty_orders):\n        *item_name, price = input().split()\n        item_name = ' '.join(item_name)\n        price = int(price)\n        \n        ord_dict[item_name] = ord_dict.get(item_name, 0) + price\n        \n    for item, total_price in ord_dict.items():\n        print(item, total_price)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Word Order",
            "code": "from collections import Counter\n\n\ndef counter_appears(lst):\n    word_count = Counter(lst)\n    \n    print(len(word_count))\n    for _ in word_count.values():\n        print(_ , end = ' ')\n        \nif __name__ ==  '__main__':\n    qty_lines = int(input())\n    \n    lst =[]\n    for _ in range(qty_lines):\n        lst.append(input())\n        \n    counter_appears(lst)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Collections.deque()",
            "code": "from collections import deque\n\ndef cmd_col(script):\n    d = deque()\n    \n    for command in script:\n        if len(command) == 1:\n            getattr(d,''.join(command))()\n        else:\n            getattr(d,command[0])(command[1])\n            \n    return ' '.join(d)\n\n\nif __name__ ==  '__main__':\n    qty_commands = int(input())\n    \n    list_com = []\n    for _ in range(qty_commands):\n        command = input().split()\n        list_com.append(command)\n    \n    print(cmd_col(list_com))\n    \n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Collections.deque()",
            "code": "from collections import deque\n\ndef cmd_col(script):\n    d = deque()\n    \n    for command in script:\n        if len(command) == 1:\n            getattr(d,command[0])()\n        else:\n            getattr(d,command[0])(command[1])\n            \n    return ' '.join(d)\n\n\nif __name__ ==  '__main__':\n    qty_commands = int(input())\n    \n    list_com = []\n    for _ in range(qty_commands):\n        command = input().split()\n        list_com.append(command)\n    \n    print(cmd_col(list_com))\n    \n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Piling Up!",
            "code": "from collections import deque\n\ndef make_tower(blocks,qty_blocks):\n    deq_blocks = deque(blocks)\n    \n    aux = True\n    \n    if qty_blocks % 2 == 0:\n        for _ in range(0,qty_blocks,2):\n            v1 = deq_blocks.pop()\n            v2 = deq_blocks.popleft()\n            \n            if v1 \u003c= v2:\n                continue\n            else:\n                aux = False \n    else:\n        aux = False\n    \n    if aux:\n        print('Yes')\n    else:\n        print('No')    \n        \nif __name__ == '__main__':\n    num_teste = int(input())\n    \n    for _ in range(num_teste):\n        qty_blocks = int(input())\n        blocks = list(map(int,input().split()))\n        \n        make_tower(blocks,qty_blocks)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Piling Up!",
            "code": "from collections import deque\n\ndef make_tower(blocks, qty_blocks):\n    deq_blocks = deque(blocks)\n    last_block = float('inf')\n    \n    while deq_blocks:\n        if deq_blocks[0] \u003e= deq_blocks[-1]:\n            current_block = deq_blocks.popleft()\n        else:\n            current_block = deq_blocks.pop()\n        \n        if current_block \u003e last_block:\n            print('No')\n            return\n        \n        last_block = current_block\n        \n    print('Yes')\n\nif __name__ == '__main__':\n    num_teste = int(input())\n    \n    for _ in range(num_teste):\n        qty_blocks = int(input())\n        blocks = list(map(int, input().split()))\n        \n        make_tower(blocks, qty_blocks)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Company Logo",
            "code": "from collections import Counter\n\ndef count_elem(string):\n    c =  Counter(string).most_common(3)\n    \n    for tuple_char in c:\n        char , qty = tuple_char\n        print(char , qty)\n\nif __name__ == '__main__':\n    s = input()\n    count_elem(s)\n",
            "score": 0.4,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Company Logo",
            "code": "from collections import Counter\n\ndef count_elem(string):\n    c =  Counter(string).most_common()\n    \n    for tuple_char in c:\n        char , qty = tuple_char\n        print(char , qty)\n\nif __name__ == '__main__':\n    s = input()\n    count_elem(s)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Company Logo",
            "code": "from collections import Counter\n\ndef count_elem(string):\n    c =  Counter(string).most_common(3)\n    \n    for tuple_char in c:\n        char , qty = tuple_char\n        print(char , qty)\n\nif __name__ == '__main__':\n    s = input()\n    count_elem(s)\n",
            "score": 0.4,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Company Logo",
            "code": "from collections import Counter\n\ndef count_elem(string):\n    string = list(string)\n    c =  Counter(string).most_common(3)\n    \n    for tuple_char in c:\n        char , qty = tuple_char\n        print(char , qty)\n\nif __name__ == '__main__':\n    s = input()\n    count_elem(s)\n",
            "score": 0.4,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Company Logo",
            "code": "from collections import Counter\n\ndef count_elem(string):\n    string = list(string)\n    string.sort()\n    c =  Counter(string).most_common(3)\n    \n    for tuple_char in c:\n        char , qty = tuple_char\n        print(char , qty)\n\nif __name__ == '__main__':\n    s = input()\n    count_elem(s)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Time Delta",
            "code": "from datetime import datetime\nimport os\n\n# Complete the time_delta function below.\ndef time_delta(t1, t2):\n    fmt = '%a %d %b %Y %H:%M:%S %z'\n    \n    dt1 = datetime.strptime(t1, fmt)\n    dt2 = datetime.strptime(t2, fmt)\n    \n    delta = abs((dt1 - dt2).total_seconds())\n    \n    return str(int(delta))\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        t1 = input()\n\n        t2 = input()\n\n        delta = time_delta(t1, t2)\n\n        fptr.write(delta + '\\n')\n\n    fptr.close()\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Mean, Var, and Std",
            "code": "import numpy\n\n\nif __name__ == '__main__':\n    wtf = input().split()\n    arr_mean = input().split()\n    arr_var = input().split()\n    \n    my_array = numpy.array([arr_mean,arr_var], dtype=int)\n    \n    print(numpy.mean(my_array , axis = 1))\n    print(numpy.var(my_array , axis = 0))\n    print(numpy.std(my_array , axis = None))\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Mean, Var, and Std",
            "code": "import numpy\n\n\nif __name__ == '__main__':\n    wtf = input().split()\n    arr_mean = input().split()\n    arr_var = input().split()\n    \n    my_array = numpy.array([arr_mean,arr_var], dtype=int)\n    \n    print(numpy.mean(my_array , axis = 1))\n    print(numpy.var(my_array , axis = 0))\n    print(numpy.std(my_array , axis = None))\n",
            "score": 0.0,
            "language": "pypy3"
        },
        {
            "contest": "Master",
            "challenge": "Mean, Var, and Std",
            "code": "import numpy\n\n\nif __name__ == '__main__':\n    wtf = input().split()\n    arr_mean = input().split()\n    arr_var = input().split()\n    \n    my_array = numpy.array([arr_mean,arr_var], dtype=int)\n    \n    print(numpy.mean(my_array , axis = 1))\n    print(numpy.var(my_array , axis = 0))\n    print(numpy.std(my_array , axis = None))\n",
            "score": 0.0,
            "language": "pypy3"
        },
        {
            "contest": "Master",
            "challenge": "Mean, Var, and Std",
            "code": "import numpy\n\n\nif __name__ == '__main__':\n    wtf = input().split()\n    arr_mean = input().split()\n    arr_var = input().split()\n    \n    my_array = numpy.array([arr_mean,arr_var], dtype=int)\n    \n    print(numpy.mean(my_array , axis = 1))\n    print(numpy.var(my_array , axis = 0))\n    print(numpy.std(my_array))\n",
            "score": 0.0,
            "language": "pypy3"
        },
        {
            "contest": "Master",
            "challenge": "Mean, Var, and Std",
            "code": "import numpy\n\n\nif __name__ == '__main__':\n    wtf = input().split()\n    arr_mean = input().split()\n    arr_var = input().split()\n    \n    my_array = numpy.array([arr_mean,arr_var], dtype=int)\n    \n    print(numpy.mean(my_array , axis = 1))\n    print(numpy.var(my_array , axis = 0))\n    std_value = numpy.std(my_array)\n    print(\"{:.11f}\".format(std_value))\n",
            "score": 0.5,
            "language": "pypy3"
        },
        {
            "contest": "Master",
            "challenge": "Mean, Var, and Std",
            "code": "import numpy\n\n\nif __name__ == '__main__':\n    input_lenght = input().split()\n    \n    arr_aux = []\n    for _ in range(int(input_lenght[0])):\n        arr_aux.append(input().split())\n    \n    my_array = numpy.array(arr_aux, dtype=int)\n    \n    print(numpy.mean(my_array , axis = 1))\n    print(numpy.var(my_array , axis = 0))\n    std_value = numpy.std(my_array)\n    print(\"{:.11f}\".format(std_value))\n",
            "score": 0.5,
            "language": "pypy3"
        },
        {
            "contest": "Master",
            "challenge": "Mean, Var, and Std",
            "code": "import numpy\n\n\nif __name__ == '__main__':\n    input_lenght = input().split()\n    \n    arr_aux = []\n    for _ in range(int(input_lenght[0])):\n        arr_aux.append(input().split())\n    \n    my_array = numpy.array(arr_aux, dtype=int)\n    \n    print(numpy.mean(my_array , axis = 1))\n    print(numpy.var(my_array , axis = 0))\n    std_value = numpy.std(my_array)\n    std_value = 0.0 if std_value == 0.0 else std_value\n    print(f'{std_value:.11f}')\n",
            "score": 0.5,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Mean, Var, and Std",
            "code": "import numpy\n\n\nif __name__ == '__main__':\n    input_lenght = input().split()\n    \n    arr_aux = []\n    for _ in range(int(input_lenght[0])):\n        arr_aux.append(input().split())\n    \n    my_array = numpy.array(arr_aux, dtype=int)\n    \n    print(numpy.mean(my_array , axis = 1))\n    print(numpy.var(my_array , axis = 0))\n    std_value = numpy.std(my_array)\n    std_value = 0.0 if std_value == 0.0 else f'{std_value:.11f}'\n    print(std_value)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Dot and Cross",
            "code": "import numpy\n\ndef calc_dot_matrix(arr,qty_lines):\n    mtx1 = numpy.array(arr[:qty_lines])\n    mtx2 = numpy.array(arr[qty_lines:])\n    \n    return numpy.dot(mtx1,mtx2)\n\n\nif __name__ == '__main__':\n    qty_lines = int(input())\n    \n    aux_arr = []\n    for _ in range(qty_lines*qty_lines):\n        aux_arr.append(list(map(int, input().split())))\n  \n    print(calc_dot_matrix(aux_arr,qty_lines))\n    \n",
            "score": 0.5,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Dot and Cross",
            "code": "import numpy\n\ndef calc_dot_matrix(arr,qty_lines):\n    mtx1 = numpy.array(arr[:qty_lines])\n    mtx2 = numpy.array(arr[qty_lines:])\n    \n    return numpy.dot(mtx1,mtx2)\n\n\nif __name__ == '__main__':\n    qty_lines = int(input())\n    \n    aux_arr = []\n    for _ in range(qty_lines*2):\n        aux_arr.append(list(map(int, input().split())))\n  \n    print(calc_dot_matrix(aux_arr,qty_lines))\n    \n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Inner and Outer",
            "code": "import numpy\n\nif __name__ == '__main__':\n    mtx1 = numpy.array(map(int,input().split()))\n    mtx2 = numpy.array(map(int,input().split()))\n    \n    print(numpy.inner(mtx1,mtx2))\n    print(numpy.outer(mtx1,mtx2))\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Inner and Outer",
            "code": "import numpy\n\nif __name__ == '__main__':\n    mtx1 = numpy.array(list(map(int,input().split())))\n    mtx2 = numpy.array(list(map(int,input().split())))\n    \n    print(numpy.inner(mtx1,mtx2))\n    print(numpy.outer(mtx1,mtx2))\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Arrays",
            "code": "\n\ndef arrays(arr):\n    aux_arr = list(reversed(arr))\n    return (numpy.array(aux_arr, float))\n    \n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Shape and Reshape",
            "code": "import numpy\n\ndef reshape_arr(arr):\n    return numpy.reshape(arr,(3,3))\n\nif __name__ ==  '__main__':\n    arr = list(map(int,input().split()))\n    print(reshape_arr(arr))\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Transpose and Flatten",
            "code": "import numpy\n\ndef transpose_arrr(arr):\n    arr_aux = numpy.array(arr)\n    return numpy.transpose(arr_aux)\n\ndef flatten_arr(arr):\n    arr_aux = numpy.array(arr)\n    return arr_aux.flatten()\n\nif __name__ == '__main__':\n    mtx_size = tuple(map(int,input().split()))\n    \n    aux_list = []\n    for _ in range(mtx_size[0]):\n        aux_list.append(list(map(int,input().split())))\n\n    print(transpose_arrr(aux_list))\n    print(flatten_arr(aux_list))\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Concatenate",
            "code": "import numpy\n\ndef concat_mtx(arr,x,y):\n    mtx1 = numpy.array(arr[:x])\n    mtx2 = numpy.array(arr[x:x+y])\n    return numpy.concatenate((mtx1,mtx2))    \n\nif __name__ == '__main__':\n    m, n, p = list(map(int,input().split()))\n    \n    aux_arr = []\n    for _ in range(m+n):\n        aux_arr.append(input().split())\n    \n    print(concat_mtx(aux_arr,m,n))\n    \n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Concatenate",
            "code": "import numpy\n\ndef concat_mtx(arr,x,y):\n    mtx1 = numpy.array(arr[:x])\n    mtx2 = numpy.array(arr[x:x+y])\n    return numpy.concatenate((mtx1,mtx2), axis = 0)    \n\nif __name__ == '__main__':\n    m, n, p = list(map(int,input().split()))\n    \n    aux_arr = []\n    for _ in range(m+n):\n        aux_arr.append(input().split())\n    \n    print(concat_mtx(aux_arr,m,n))\n    \n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Concatenate",
            "code": "import numpy\n\ndef concat_mtx(arr,x,y):\n    mtx1 = numpy.array(arr[:x])\n    mtx2 = numpy.array(arr[x:x+y])\n    return numpy.concatenate((mtx1,mtx2), axis = 0)    \n\nif __name__ == '__main__':\n    m, n, p = list(map(int,input().split()))\n    \n    aux_arr = []\n    for _ in range(m+n):\n        aux_arr.append(list(map(int,input().split())))\n    \n    print(concat_mtx(aux_arr,m,n))\n    \n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Zeros and Ones",
            "code": "import numpy\n\ndef printer(arr):\n    print(numpy.zeros((arr), dtype = numpy.int))\n    print(numpy.ones((arr), dtype = numpy.int))\n\n\nif __name__ == '__main__':\n    aux_list = numpy.array(list(map(int, input().split())))\n    \n    printer(aux_list)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Zeros and Ones",
            "code": "import numpy\n\ndef printer(arr):\n    print(numpy.zeros((arr), dtype = int))\n    print(numpy.ones((arr), dtype = int))\n\nif __name__ == '__main__':\n    aux_list = numpy.array(list(map(int, input().split())))\n    \n    printer(aux_list)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Eye and Identity",
            "code": "import numpy\nnumpy.set_printoptions(legacy='1.13')\n\n\nif __name__ == '__main__':\n    n , m = list(map(int, input().split()))\n    \n    print(numpy.identity(m))\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Eye and Identity",
            "code": "import numpy\nnumpy.set_printoptions(legacy='1.13')\n\n\nif __name__ == '__main__':\n    n , m = list(map(int, input().split()))\n    \n    print(numpy.identity(n))\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Eye and Identity",
            "code": "import numpy\nnumpy.set_printoptions(legacy='1.13')\n\ndef print_eye_identity(n,m):\n    if n == m:\n        print(numpy.identity(n))\n    else:\n        print(numpy.eye(n,m))\n\n\nif __name__ == '__main__':\n    n , m = list(map(int, input().split()))\n    print_eye_identity(n,m)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Array Mathematics",
            "code": "import numpy as np\n\ndef printer_operatios(arr,n):\n    mtx1 = np.array(arr[:n])\n    mtx2 = np.array(arr[n:])\n    \n    print(np.add(mtx1, mtx2))\n    print(np.subtract(mtx1, mtx2))\n    print(np.multiply(mtx1, mtx2))\n    print(np.floor_divide(mtx1, mtx2))\n    print(np.mod(mtx1, mtx2))\n    print(np.power(mtx1, mtx2))\n\nif __name__ == '__main__':\n    n , m = map(int, input().split())\n    \n    aux_list = []\n    for _ in range(n*2):\n        aux_list.append(list(map(int, input().split())))\n        \n    printer_operatios(aux_list,n)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Floor, Ceil and Rint",
            "code": "import numpy as np\nnp.set_printoptions(legacy='1.13')\n\ndef print_floor_ceil_rint(np_arr):\n    print(np.floor(np_arr))\n    print(np.ceil(np_arr))\n    print(np.rint(np_arr))\n\nif __name__ == '__main__':\n    np_arr = np.array(list(map(float, input().split())))\n    print_floor_ceil_rint(np_arr)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Floor, Ceil and Rint",
            "code": "import numpy as np\nnp.set_printoptions(legacy='1.13')\n\ndef print_floor_ceil_rint(np_arr):\n    print(np.floor(np_arr))\n    print(np.ceil(np_arr))\n    print(np.rint(np_arr))\n\nif __name__ == '__main__':\n    np_arr = np.array(list(map(float, input().split())))\n    print_floor_ceil_rint(np_arr)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Sum and Prod",
            "code": "import numpy as np\n\ndef np_sum_prod(arr):\n    np_arr = np.array(arr)\n    np_arr = np.sum(np_arr , axis = 0)\n    return np.prod(np_arr)\n\nif __name__ == '__main__':\n    n , m = list(map(int, input().split()))\n    \n    aux_list = []\n    for _ in range(n):\n        aux_list.append(list(map(int, input().split())))\n        \n    print(np_sum_prod(aux_list))\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Min and Max",
            "code": "import numpy as np\n\ndef np_max(arr):\n    np_arr = np.array(arr)\n    return np.max(np_arr, axis = 1)\n\nif __name__ == '__main__':\n    n , m = list(map(int ,input().split()))\n    \n    aux_list = []\n    for _ in range(n):\n        aux_list.append(list(map(int ,input().split())))\n    \n    \n    print(np_max(aux_list))\n    \n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Min and Max",
            "code": "import numpy as np\n\ndef np_max(arr):\n    np_arr = np.array(arr)\n    np_axis1_max = np.max(np_arr, axis = 1)\n    return min(np_axis1_max)\n\nif __name__ == '__main__':\n    n , m = list(map(int ,input().split()))\n    \n    aux_list = []\n    for _ in range(n):\n        aux_list.append(list(map(int ,input().split())))\n    \n    \n    print(np_max(aux_list))\n    \n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Min and Max",
            "code": "import numpy as np\n\ndef np_max_value_axis(arr,axis):\n    np_arr = np.array(arr)\n    np_axis1_min = np.min(np_arr, axis = axis)\n    return max(np_axis1_min)\n\nif __name__ == '__main__':\n    n , m = list(map(int ,input().split()))\n    \n    aux_list = []\n    for _ in range(n):\n        aux_list.append(list(map(int ,input().split())))\n    \n    \n    print(np_max_value_axis(aux_list,1))\n    \n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Min and Max",
            "code": "import numpy as np\n\ndef np_max_of_min_values(arr,axis):\n    np_arr = np.array(arr)\n    np_axis1_min = np.min(np_arr, axis = axis)\n    return max(np_axis1_min)\n\nif __name__ == '__main__':\n    n , m = list(map(int ,input().split()))\n    \n    aux_list = []\n    for _ in range(n):\n        aux_list.append(list(map(int ,input().split())))\n    \n    \n    print(np_max_of_min_values(aux_list,1))\n    \n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Polynomials",
            "code": "import numpy as np\n\n\nif __name__ == '__main__':\n    np_arr = np.array(list(map(float, input().split())))\n    x = int(input())\n    \n    print(np.polyval(np_arr, x))\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Linear Algebra",
            "code": "import numpy as np\n\ndef np_det_mtx(np_arr):\n    return np.linalg.det(np_arr)\n\nif __name__ == '__main__':\n    n = int(input())\n    \n    aux_list = []\n    for _ in range(n):\n        aux_list.append(list(map(float, input().split())))\n    \n    print(np_det_mtx(np.array(aux_list)))\n",
            "score": 0.5,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Linear Algebra",
            "code": "import numpy as np\n\ndef np_det_mtx(np_arr):\n    det = np.linalg.det(np_arr)\n    return f'{det:.2f}' if det != 0 else det\n\nif __name__ == '__main__':\n    n = int(input())\n    \n    aux_list = []\n    for _ in range(n):\n        aux_list.append(list(map(float, input().split())))\n    \n    print(np_det_mtx(np.array(aux_list)))\n",
            "score": 0.5,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Linear Algebra",
            "code": "import numpy as np\n\ndef np_det_mtx(np_arr):\n    det = np.linalg.det(np_arr)\n    return f'{det:.1f}' if det != 0 else det\n\nif __name__ == '__main__':\n    n = int(input())\n    \n    aux_list = []\n    for _ in range(n):\n        aux_list.append(list(map(float, input().split())))\n    \n    print(np_det_mtx(np.array(aux_list)))\n",
            "score": 0.5,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Linear Algebra",
            "code": "import numpy as np\n\ndef np_det_mtx(np_arr):\n    det = np.linalg.det(np_arr)\n    return f'{det:.2f}' \\\n    if det != 0 and det != int(det) \\\n    else det\n\n\nif __name__ == '__main__':\n    n = int(input())\n    \n    aux_list = []\n    for _ in range(n):\n        aux_list.append(list(map(float, input().split())))\n    \n    print(np_det_mtx(np.array(aux_list)))\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Validating Roman Numerals",
            "code": "regex_pattern = r\"^(M{0,3})(C(?:D|M)|D?C{0,3})(X(?:L|C)|L?X{0,3})(I(?:V|X)|V?I{0,3})$\"\t# Do not delete 'r'.\n\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Validating phone numbers",
            "code": "import re\n\ndef check_number(number):\n    pattern = r'^[987][\\d]{9}'\n    check = re.match(pattern,number)\n    return 'YES' if check else 'NO'\n    \nif __name__ == '__main__':\n    lines = int(input())\n    \n    for _ in range(lines):\n        print(check_number(''.join(input().split())))\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Validating phone numbers",
            "code": "import re\n\ndef check_number(number):\n    pattern = r'^[987][\\d]{9}$'\n    check = re.match(pattern,number)\n    return 'YES' if check else 'NO'\n    \nif __name__ == '__main__':\n    lines = int(input())\n    \n    for _ in range(lines):\n        print(check_number(''.join(input().split())))\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Validating and Parsing Email Addresses",
            "code": "import email.utils\nimport re\n\ndef validate_email(aux_email):\n    name , adress = email.utils.parseaddr(aux_email)\n    pattern = r\".+\\@.+\\..+\"\n    \n    re_check = re.match(pattern,adress)\n    \n    return aux_email if re_check else ''\n    \nif __name__ == '__main__':\n    lines = int(input())\n    \n    for _ in range(lines):\n        aux_email = input()\n        print(validate_email(aux_email))\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Validating and Parsing Email Addresses",
            "code": "import email.utils\nimport re\n\ndef validate_email(aux_email):\n    name , adress = email.utils.parseaddr(aux_email)\n    pattern = r\"^[\\w][\\w._-]*@[A-Za-z]+\\.[A-Za-z]{2,6}$\"\n    \n    re_check = re.match(pattern,adress)\n    \n    return aux_email if re_check else ''\n    \nif __name__ == '__main__':\n    lines = int(input())\n    \n    for _ in range(lines):\n        aux_email = input()\n        print(validate_email(aux_email))\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Validating and Parsing Email Addresses",
            "code": "import email.utils\nimport re\n\ndef validate_email(aux_email):\n    name , adress = email.utils.parseaddr(aux_email)\n    pattern = r\"^[A-Za-z][A-Za-z0-9._-]*@[A-Za-z]+\\.[A-Za-z]{2,6}$\"\n    \n    re_check = re.match(pattern,adress)\n    \n    return aux_email if re_check else ''\n    \nif __name__ == '__main__':\n    lines = int(input())\n    \n    for _ in range(lines):\n        aux_email = input()\n        print(validate_email(aux_email))\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Validating and Parsing Email Addresses",
            "code": "import email.utils\nimport re\n\ndef validate_email(aux_email):\n    name , adress = email.utils.parseaddr(aux_email)\n    pattern = r\".+\\@.+\\..+\"\n    \n    re_check = re.match(pattern,adress)\n    \n    return aux_email if re_check else ''\n    \nif __name__ == '__main__':\n    lines = int(input())\n    \n    for _ in range(lines):\n        aux_email = input()\n        print(validate_email(aux_email))\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Validating and Parsing Email Addresses",
            "code": "import email.utils\nimport re\n\ndef validate_email(aux_email):\n    name , adress = email.utils.parseaddr(aux_email)\n    pattern = r\"^[A-Za-z][A-Za-z0-9._-]*@[A-Za-z]+\\.[A-Za-z]{2,6}$\"\n    \n    re_check = re.match(pattern,adress)\n    \n    return aux_email if re_check else ''\n    \nif __name__ == '__main__':\n    lines = int(input())\n    \n    for _ in range(lines):\n        aux_email = input()\n        print(validate_email(aux_email))\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Validating and Parsing Email Addresses",
            "code": "import email.utils\nimport re\n\ndef validate_email(aux_email):\n    name , adress = email.utils.parseaddr(aux_email)\n    pattern = r\"^[A-Za-z][A-Za-z0-9._-]*@[A-Za-z]+\\.[A-Za-z]{2,6}$\"\n    \n    re_check = re.match(pattern,adress)\n    \n    if re_check:\n        print(aux_email)\n        \nif __name__ == '__main__':\n    lines = int(input())\n    \n    for _ in range(lines):\n        aux_email = input()\n        validate_email(aux_email)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Validating and Parsing Email Addresses",
            "code": "import email.utils\nimport re\n\ndef validate_email(aux_email):\n    name , adress = email.utils.parseaddr(aux_email)\n    pattern = r\"^[A-Za-z][A-Za-z0-9._-]*@[A-Za-z]+\\.[A-Za-z]{2,6}$\"\n    \n    re_check = re.match(pattern,adress)\n    \n    if re_check:\n        print(aux_email)\n        \nif __name__ == '__main__':\n    lines = int(input())\n    \n    for _ in range(lines):\n        aux_email = input()\n        validate_email(aux_email)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Validating and Parsing Email Addresses",
            "code": "import email.utils\nimport re\n\ndef validate_email(aux_email):\n    name , adress = email.utils.parseaddr(aux_email)\n    pattern = r\"^[A-Za-z][A-Za-z0-9._-]*@[A-Za-z]+\\.[COM]{2,6}$\"\n    \n    re_check = re.match(pattern,adress)\n    \n    if re_check:\n        print(aux_email)\n        \nif __name__ == '__main__':\n    lines = int(input())\n    \n    for _ in range(lines):\n        aux_email = input()\n        validate_email(aux_email)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Validating and Parsing Email Addresses",
            "code": "import email.utils\nimport re\n\ndef validate_email(aux_email):\n    name , adress = email.utils.parseaddr(aux_email)\n    pattern = r\"^[A-Za-z][A-Za-z0-9._-]*@[A-Za-z]+\\.[COMcom]{2,6}$\"\n    \n    re_check = re.match(pattern,adress)\n    \n    if re_check:\n        print(aux_email)\n        \nif __name__ == '__main__':\n    lines = int(input())\n    \n    for _ in range(lines):\n        aux_email = input()\n        validate_email(aux_email)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Validating and Parsing Email Addresses",
            "code": "import email.utils\nimport re\n\ndef validate_email(aux_email):\n    name , adress = email.utils.parseaddr(aux_email)\n    pattern = r\"^[A-Za-z][A-Za-z0-9._-]*@[A-Za-z]+\\.[A-Za-z]{2,6}$\"\n    \n    re_check = re.match(pattern,adress)\n    \n    if re_check:\n        print(aux_email)\n        \nif __name__ == '__main__':\n    lines = int(input())\n    \n    for _ in range(lines):\n        aux_email = input()\n        validate_email(aux_email)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Validating and Parsing Email Addresses",
            "code": "import email.utils\nimport re\n\ndef validate_email(aux_email):\n    name , adress = email.utils.parseaddr(aux_email)\n    pattern = r\"^[A-Za-z][A-Za-z0-9._-]*@[A-Za-z]+\\.[A-Za-z]{0,3}$\"\n    \n    re_check = re.match(pattern,adress)\n    \n    if re_check:\n        print(aux_email)\n        \nif __name__ == '__main__':\n    lines = int(input())\n    \n    for _ in range(lines):\n        aux_email = input()\n        validate_email(aux_email)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Validating and Parsing Email Addresses",
            "code": "import email.utils\nimport re\n\ndef validate_email(aux_email):\n    name , adress = email.utils.parseaddr(aux_email)\n    pattern = r\"^[A-Za-z][A-Za-z0-9._-]*@[A-Za-z]+\\.[A-Za-z]{1,3}$\"\n    \n    re_check = re.match(pattern,adress)\n    \n    if re_check:\n        print(aux_email)\n        \nif __name__ == '__main__':\n    lines = int(input())\n    \n    for _ in range(lines):\n        aux_email = input()\n        validate_email(aux_email)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Hex Color Code",
            "code": "import re\n\ndef find_hex_collors(text):\n    pattern = r'[#][0-9A-Fa-f]{3,6}'\n    \n    hex_collor = re.findall(pattern, text)\n    \n    print(list(hex_collor))\n\nif __name__ == '__main__':\n    lines = int(input())-1\n    \n    text = ''\n    for _ in range(lines):\n        text+= input()\n        \n    print(text)\n    find_hex_collors(text)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Hex Color Code",
            "code": "import re\n\ndef find_hex_collors(text):\n    pattern = r'[#][0-9A-Fa-f]{3,6}'\n    \n    hex_collor = re.findall(pattern, text)\n    \n    print(list(hex_collor))\n\nif __name__ == '__main__':\n    lines = int(input())-1\n    \n    text = ''\n    for _ in range(lines):\n        text+= input()\n\n    find_hex_collors(text)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Hex Color Code",
            "code": "import re\n\ndef find_hex_collors(text):\n    pattern = r'[#][0-9A-Fa-f]{3,6}'\n    \n    hex_collors = re.findall(pattern, text)\n    \n    for item in hex_collors:\n        print(item)\n\nif __name__ == '__main__':\n    lines = int(input())-1\n    \n    text = ''\n    for _ in range(lines):\n        text+= input()\n\n    find_hex_collors(text)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Hex Color Code",
            "code": "import re\n\ndef find_hex_collors(text):\n    pattern = r'(?\u003c![}|{])#[0-9A-Fa-f]{3,6}(?\u003c![}|{])'\n    \n    hex_collors = re.findall(pattern, text)\n    \n    for item in hex_collors:\n        print(item)\n\nif __name__ == '__main__':\n    lines = int(input())-1\n    \n    text = ''\n    for _ in range(lines):\n        text+= input()\n\n    find_hex_collors(text)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Hex Color Code",
            "code": "import re\n\ndef find_hex_collors(text):\n    pattern = r'(?\u003c!#)[#][0-9A-Fa-f]{3,6}(?![{A-Za-z0-9])'\n    \n    hex_collors = re.findall(pattern, text)\n    \n    for item in hex_collors:\n        print(item)\n\nif __name__ == '__main__':\n    lines = int(input())-1\n    \n    text = ''\n    for _ in range(lines):\n        text+= input()\n\n    find_hex_collors(text)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Hex Color Code",
            "code": "import re\n\ndef find_hex_collors(text):\n    pattern = \"(?\u003c!#)[#][0-9A-Fa-f]{3,6}(?![{A-Za-z0-9 ])\"\n    \n    hex_collors = re.findall(pattern, text)\n    \n    for item in hex_collors:\n        print(item)\n\nif __name__ == '__main__':\n    lines = int(input())-1\n    \n    text = ''\n    for _ in range(lines):\n        text+= input()\n\n    find_hex_collors(text)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "HTML Parser - Part 1",
            "code": "from html.parser import HTMLParser\n\nclass MyHTMLParser(HTMLParser):\n    def handle_starttag(self, tag, attrs):\n        print(\"Start :\", tag)\n        for attr, value in attrs:\n            print(f\"-\u003e {attr} \u003e {value if value else 'None'}\")\n\n    def handle_endtag(self, tag):\n        print(\"End   :\", tag)\n\n    def handle_startendtag(self, tag, attrs):\n        print(\"Empty :\", tag)\n        for attr, value in attrs:\n            print(f\"-\u003e {attr} \u003e {value if value else 'None'}\")\n\nif __name__ == '__main__':\n    lines = int(input())\n    \n    html_text = ''\n    for _ in range(lines):\n        html_text += input()\n    \n    parser = MyHTMLParser()\n    parser.feed(html_text)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "HTML Parser - Part 2",
            "code": "from html.parser import HTMLParser\n\nclass MyHTMLParser(HTMLParser):\n    def handle_comment(self, data):\n        data_check = data.split('\\n')\n        if len(data_check) \u003e= 2:\n            print(f'\u003e\u003e\u003e Multi-line Comment\\n{data}')\n        else:\n            print(f'\u003e\u003e\u003e Single-line Comment\\n{data}')\n        \n    def handle_data(self, data):\n        if data != '\\n':\n            print(f'\u003e\u003e\u003e Data\\n{data}')\n\nhtml = \"\"       \nfor i in range(int(input())):\n    html += input().rstrip()\n    html += '\\n'\n    \nparser = MyHTMLParser()\nparser.feed(html)\nparser.close()\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Detect HTML Tags, Attributes and Attribute Values",
            "code": "from html.parser import HTMLParser\n\nclass MyHTMLParser(HTMLParser):\n    def handle_starttag(self , tag , attrs):\n        print(tag)\n        for attr, value in attrs:\n            print(f\"-\u003e {attr} \u003e {value if value else 'None'}\")\n    \n    def handle_startendtag(self, tag , attrs):\n        print(tag)\n        for attr, value in attrs:\n            print(f\"-\u003e {attr} \u003e {value if value else 'None'}\")\n\nif __name__ == '__main__':\n    lines = int(input())\n    \n    html_text = ''\n    for _ in range(lines):\n        html_text+= input().rstrip()\n        html_text+= '\\n'\n\n    parser = MyHTMLParser()\n    parser.feed(html_text)\n    parser.close()\n    \n    \n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Validating UID ",
            "code": "import re\n\ndef check_UID(string):\n    pattern = r'^(?!.*(.).*\\1)[A-Za-z0-9]+$'\n    check = re.match(pattern,string)\n    \n    if check:\n        print('Valid')\n    else:\n        print('Invalid')\n\nif __name__ == '__main__':\n    lines = int(input())\n    \n    for _ in range(lines):\n        check_UID(input())\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Validating UID ",
            "code": "import re\n\ndef check_UID(string):\n    pattern = r'^(?!.*(.).*\\1)[A-Za-z0-9]{1,10}$'\n    check = re.match(pattern,string)\n    \n    if check:\n        print('Valid')\n    else:\n        print('Invalid')\n\nif __name__ == '__main__':\n    lines = int(input())\n    \n    for _ in range(lines):\n        check_UID(input())\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Validating UID ",
            "code": "import re\n\ndef check_UID(string):\n    pattern = r'^(?!.*(.).*\\1)[A-Za-z0-9]{10}$'\n    check = re.match(pattern,string)\n    \n    if check:\n        print('Valid')\n    else:\n        print('Invalid')\n\nif __name__ == '__main__':\n    lines = int(input())\n    \n    for _ in range(lines):\n        check_UID(input())\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Validating UID ",
            "code": "import re\n\ndef check_UID(string):\n    pattern = r'^(?=(?:.*[A-Z]){2})(?=(?:.*\\d){3})(?!.*(.).*\\1)[A-Za-z0-9]{10}$'\n    check = re.match(pattern,string)\n    \n    if check:\n        print('Valid')\n    else:\n        print('Invalid')\n\nif __name__ == '__main__':\n    lines = int(input())\n    \n    for _ in range(lines):\n        check_UID(input())\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Regex Substitution",
            "code": "import re\n\ndef sub_logic(string):\n    string = re.sub(r\" \u0026\u0026 \", \" and \", string)\n    string = re.sub(r\" \\|\\| \", \" or \", string)\n    return string\n\nif __name__ == '__main__':\n    lines = int(input())\n    html_text = '\\n'.join(sub_logic(input()) for _ in range(lines))\n    print(html_text)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Regex Substitution",
            "code": "import re\n\ndef sub_logic(string):\n    string = re.sub(r\"(?\u003c= )\u0026\u0026(?= )\", \"and\", string)\n    string = re.sub(r\"(?\u003c= )\\|\\|(?\u003c= )\", \"or\", string)\n    return string\n\nif __name__ == '__main__':\n    lines = int(input())\n    html_text = '\\n'.join(sub_logic(input()) for _ in range(lines))\n    print(html_text)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Regex Substitution",
            "code": "import re\n\ndef sub_logic(string):\n    string = re.sub(r\"(?\u003c= )\u0026\u0026(?= )\", \"and\", string)\n    string = re.sub(r\"(?\u003c= )||(?\u003c= )\", \"or\", string)\n    return string\n\nif __name__ == '__main__':\n    lines = int(input())\n    html_text = '\\n'.join(sub_logic(input()) for _ in range(lines))\n    print(html_text)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Regex Substitution",
            "code": "import re\n\ndef sub_logic(string):\n    string = re.sub(r\"(?\u003c= )\u0026\u0026(?= )\", \" and \", string)\n    string = re.sub(r\"(?\u003c= )\\|\\|(?\u003c= )\", \" or \", string)\n    return string\n\nif __name__ == '__main__':\n    lines = int(input())\n    html_text = '\\n'.join(sub_logic(input()) for _ in range(lines))\n    print(html_text)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Regex Substitution",
            "code": "import re\n\ndef sub_logic(string):\n    string = re.sub(r\"(?\u003c= )\u0026\u0026(?= )\", \" and \", string)\n    string = re.sub(r\" \\|\\| \", \" or \", string)\n    return string\n\nif __name__ == '__main__':\n    lines = int(input())\n    html_text = '\\n'.join(sub_logic(input()) for _ in range(lines))\n    print(html_text)\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Regex Substitution",
            "code": "import re\n\ndef sub_logic(string):\n    string = re.sub(r\"(?\u003c= )\u0026\u0026(?= )\", \"and\", string)\n    string = re.sub(r\" \\|\\| \", \" or \", string)\n    return string\n\nif __name__ == '__main__':\n    lines = int(input())\n    html_text = '\\n'.join(sub_logic(input()) for _ in range(lines))\n    print(html_text)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Validating Credit Card Numbers",
            "code": "import re\n\ndef check_card(string):\n    \n    clean_number = string.replace(\"-\", \"\")\n    if re.search(r\"(\\d)\\1{3}\", clean_number):\n        return \"Invalid\"\n    \n    pattern = r\"^(?!.*(\\d)(\\1{3}))[456][0-9]{3}-?[0-9]{4}-?[0-9]{4}-?[0-9]{4}$\"\n    check = re.match(pattern,string)\n        \n    return 'Valid' if check else 'Invalid'\n    \nif __name__ == '__main__':\n    lines = int(input())\n    \n    for _ in range(lines):\n        print(check_card(input()))\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Validating Postal Codes",
            "code": "regex_integer_in_range = r\"_________\"\t# Do not delete 'r'.\nregex_alternating_repetitive_digit_pair = r\"_________\"\t# Do not delete 'r'.\n\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Validating Postal Codes",
            "code": "regex_integer_in_range = r\"^[1-9]\\d{5}$\"\t# Do not delete 'r'.\nregex_alternating_repetitive_digit_pair = r\"([\\d]{2})\\1\"\t# Do not delete 'r'.\n\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Validating Postal Codes",
            "code": "regex_integer_in_range = r\"^[1-9]\\d{5}$\"\t# Do not delete 'r'.\nregex_alternating_repetitive_digit_pair = r\"(\\d)(?=\\d\\1)\"\t# Do not delete 'r'.\n\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Matrix Script",
            "code": "from collections import deque\nimport re\n\ndef decode_matrix(matrix_arr):\n    dq_matrix = [deque(row) for row in matrix_arr]\n\n    decode = []\n    while any(dq_matrix):\n        for elem in dq_matrix:\n            if elem:\n                decode.append(elem.popleft())\n    \n    decode = ''.join(decode)\n    pattern = r'(?\u003c=\\w)[^\\w\\d]+(?=\\w)'\n    decoded_text = re.sub(pattern,' ', decode)\n    \n    return decoded_text\n\nif __name__ == '__main__':\n    first_multiple_input = input().rstrip().split()\n\n    n = int(first_multiple_input[0])\n\n    m = int(first_multiple_input[1])\n\n    matrix = []\n\n    for _ in range(n):\n        matrix_item = input()\n        matrix.append(matrix_item)\n\n    print(decode_matrix(matrix))\n    \n    \n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Matrix Script",
            "code": "from collections import deque\nimport re\n\ndef decode_matrix(matrix_arr):\n    dq_matrix = [deque(row) for row in matrix_arr]\n\n    decode = []\n    while any(dq_matrix):\n        for elem in dq_matrix:\n            if elem:\n                decode.append(elem.popleft())\n    \n    decode = ''.join(decode)\n    pattern = r'(?\u003c=\\w)[^\\w\\d]+(?=\\w)'\n    decoded_text = re.sub(pattern,' ', decode)\n    \n    return decoded_text\n\nif __name__ == '__main__':\n    first_multiple_input = input().rstrip().split()\n\n    n = int(first_multiple_input[0])\n\n    m = int(first_multiple_input[1])\n\n    matrix = []\n\n    for _ in range(n):\n        matrix_item = input()\n        matrix.append(matrix_item)\n\n    print(decode_matrix(matrix))\n    \n    \n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Matrix Script",
            "code": "from collections import deque\nimport re\n\ndef decode_matrix(matrix_arr):\n    dq_matrix = [deque(row) for row in matrix_arr]\n\n    decode = []\n    while any(dq_matrix):\n        for elem in dq_matrix:\n            decode.append(elem.popleft())\n    \n    decode = ''.join(decode)\n    pattern = r'(?\u003c=\\w)[^\\w\\d]+(?=\\w)'\n    decoded_text = re.sub(pattern,' ', decode)\n    \n    return decoded_text\n\nif __name__ == '__main__':\n    first_multiple_input = input().rstrip().split()\n\n    n = int(first_multiple_input[0])\n\n    m = int(first_multiple_input[1])\n\n    matrix = []\n\n    for _ in range(n):\n        matrix_item = input()\n        matrix.append(matrix_item)\n\n    print(decode_matrix(matrix))\n    \n    \n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Matrix Script",
            "code": "from collections import deque\nimport re\n\ndef decode_matrix(matrix_arr):\n    dq_matrix = [deque(row) for row in matrix_arr]\n\n    decode = []\n    while any(dq_matrix):\n        for elem in dq_matrix:\n            decode.append(elem.popleft())\n    \n    decode = ''.join(decode)\n    pattern = r'(?\u003c=\\w)[^\\w\\d]+(?=\\w)'\n    decoded_text = re.sub(pattern,' ', decode)\n    \n    return decoded_text\n\nfirst_multiple_input = input().rstrip().split()\n\nn = int(first_multiple_input[0])\n\nm = int(first_multiple_input[1])\n\nmatrix = []\n\nfor _ in range(n):\n    matrix_item = input()\n    matrix.append(matrix_item)\n\nprint(decode_matrix(matrix))\n\n    \n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Matrix Script",
            "code": "import re\n\ndef decode_matrix(matrix_arr):\n    decode = []\n\n    for col in range(m):  \n        for row in range(n):\n            decode.append(matrix_arr[row][col])  \n\n    decode = ''.join(decode)\n    pattern = r'(?\u003c=\\w)[^\\w\\d]+(?=\\w)'\n    decoded_text = re.sub(pattern, ' ', decode)\n    \n    return decoded_text\n\nfirst_multiple_input = input().rstrip().split()\n\nn = int(first_multiple_input[0])\n\nm = int(first_multiple_input[1])\n\nmatrix = []\n\nfor _ in range(n):\n    matrix_item = input()\n    matrix.append(matrix_item)\n\nprint(decode_matrix(matrix,m,n))\n\n    \n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Matrix Script",
            "code": "import re\n\ndef decode_matrix(matrix_arr,m,n):\n    decode = []\n\n    for col in range(m):  \n        for row in range(n):\n            decode.append(matrix_arr[row][col])  \n\n    decode = ''.join(decode)\n    pattern = r'(?\u003c=\\w)[^\\w\\d]+(?=\\w)'\n    decoded_text = re.sub(pattern, ' ', decode)\n    \n    return decoded_text\n\nfirst_multiple_input = input().rstrip().split()\n\nn = int(first_multiple_input[0])\n\nm = int(first_multiple_input[1])\n\nmatrix = []\n\nfor _ in range(n):\n    matrix_item = input()\n    matrix.append(matrix_item)\n\nprint(decode_matrix(matrix,m,n))\n\n    \n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Exceptions",
            "code": "if __name__ == '__main__':\n    lines = int(input())\n    \n    for _ in range(lines):\n        x , y = input().split()\n        \n        try:\n            result = int(x) // int(y)\n            print(result)\n        except (ZeroDivisionError , ValueError) as e:\n            print('Error Code:',e)\n            continue\n            \n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Exceptions",
            "code": "if __name__ == '__main__':\n    lines = int(input())\n    \n    for _ in range(lines):\n        x , y = input().split()\n        \n        try:\n            result = int(x) // int(y)\n            print(result)\n        except (ZeroDivisionError , ValueError) as e:\n            print('Error Code:',e)\n            \n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Incorrect Regex",
            "code": "import re\n\nif __name__ == \"__main__\":\n    n = int(input())\n    for _ in range(n):\n        try:\n            boolean = bool(re.compile(input()))\n            print(True)\n        except re.error:\n            print(False)\n",
            "score": 1.0,
            "language": "pypy3"
        },
        {
            "contest": "Master",
            "challenge": "Class 2 - Find the Torsional Angle",
            "code": "\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n        \n    def __sub__(self, no):\n        return Points(self.x - no.x, self.y - no.y, self.z - no.z)\n    def dot(self, no):\n        return self.x * no.x + self.y * no.y + self.z * no.z\n    def cross(self, no):\n        return Points(self.y * no.z - self.z * no.y,\n                      self.z * no.x - self.x * no.z,\n                      self.x * no.y - self.y * no.x)\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Classes: Dealing with Complex Numbers",
            "code": "\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n        \n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n        \n    def __mul__(self, no):\n        real_part = self.real * no.real - self.imaginary * no.imaginary\n        imaginary_part = self.real * no.imaginary + self.imaginary * no.real\n        return Complex(real_part, imaginary_part)\n\n    def __truediv__(self, no):\n        denominator = no.real ** 2 + no.imaginary ** 2\n        real_part = (self.real * no.real + self.imaginary * no.imaginary) / denominator\n        imaginary_part = (self.imaginary * no.real - self.real * no.imaginary) / denominator\n        return Complex(real_part, imaginary_part)\n\n    def mod(self):\n        return Complex(math.sqrt(self.real ** 2 + self.imaginary ** 2), 0)\n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary \u003e= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary \u003e 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result\n\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Zipped!",
            "code": "def average_score(exams_list):\n    for student_score in zip(*exams_list):\n        print(sum(score for score in student_score)/ len(exams_list))\n\nif __name__ == '__main__':\n    students , exams = map(int,input().split())\n    \n    exams_list = []\n    for _ in range(exams):\n        exams_list.append(list(map(float,input().split())))\n    \n    average_score(exams_list)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Input()",
            "code": "if __name__ == '__main__':\n    x , k = map(int,input().split())\n    \n    px = eval(input())\n    if  px == k:\n        print(True)\n    else:\n        print(False)\n    \n    \n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Python Evaluation",
            "code": "if __name__ == '__main__':\n    eval(input())\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Athlete Sort",
            "code": "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\ndef sorted_key(arr,k):\n    new_arr = sorted(arr,key=lambda row: row[k])\n    for line in new_arr:\n        print(' '.join(map(str, line)))\n\nif __name__ == '__main__':\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    arr = []\n\n    for _ in range(n):\n        arr.append(list(map(int, input().rstrip().split())))\n\n    k = int(input())\n    \n    sorted_key(arr,k)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Any or All",
            "code": "if __name__ == '__main__':\n    qty = int(input())\n    \n    elements = list(map(int, input().split()))\n    \n    if all(elements) \u003e= 0:\n        print(True)\n    \n",
            "score": 0.4,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Any or All",
            "code": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef check_positive(arr):\n    if all(elem \u003e=0 for elem in elements):\n        print(True)\n    else:\n        print(False)\n\nif __name__ == '__main__':\n    qty = int(input())\n    \n    elements = list(map(int, input().split()))\n\n    \n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Any or All",
            "code": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef check_positive(arr):\n    if all(elem \u003e=0 for elem in elements):\n        print(True)\n    else:\n        print(False)\n\nif __name__ == '__main__':\n    qty = int(input())\n    \n    elements = list(map(int, input().split()))\n    check_positive(elements)\n    \n",
            "score": 0.8,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Any or All",
            "code": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef check_positive(arr):\n    if all(elem \u003e=0 for elem in elements):\n        return True\n    else:\n        return False\n        \ndef is_palindrome_and_positive(arr):\n    for elem in arr:\n        if is_palindrome(elem):\n            break\n            return True\n    return check_positive(arr)\n    \nif __name__ == '__main__':\n    qty = int(input())\n    \n    elements = list(map(int, input().split()))\n    print(is_palindrome_and_positive(elements))\n    \n",
            "score": 0.8,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Any or All",
            "code": "qty = input()\nelements = list(map(int, input().split()))\nif all(elem \u003e= 0 for elem in elements) and qty == qty[::1]:\n    print(True)\n",
            "score": 0.4,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Any or All",
            "code": "qty = input()\nprint(True) if all(elem \u003e= 0 for elem in list(map(int, input().split()))) and qty == qty[::1] else print(False)\n",
            "score": 0.8,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Any or All",
            "code": "qty = input()\nprint(True) if all(elem \u003e= 0 for elem in list(map(int, input().split()))) and qty == qty[::-1] else print(False)\n",
            "score": 0.6,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Any or All",
            "code": "qty = input()\nprint(True) if all(elem \u003e= 0 for elem in list(map(int, input().split()))) and str(qty) == str(qty)[::-1] else print(False)\n",
            "score": 0.6,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Any or All",
            "code": "qty = input()\narr = list(map(int, input().split()))\nprint(all(elem \u003e= 0 for elem in arr) and any(str(elem)[::-1]==str(elem) for elem in arr))\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Any or All",
            "code": "qty = input()\narr = list(map(int, input().split()))\nprint(all(elem \u003e= 0 for elem in arr) and any(str(qty)[::-1]==str(qty)))\n",
            "score": 0.4,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Any or All",
            "code": "qty = input()\narr = list(map(int, input().split()))\nprint(all(elem \u003e= 0 for elem in arr) and any(str(elem)[::-1]==str(elem) for elem in arr))\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "ginortS",
            "code": "def sorting(lst):\n    \n    upper = []\n    lower = []\n    odd = []\n    even = []\n\n    for elem in lst:\n        if elem.isupper():\n            upper.append(elem)\n        elif elem.islower():\n            lower.append(elem)\n        elif elem.isnumeric():\n            if int(elem) % 2 == 0:\n                even.append(elem)\n            else:\n                odd.append(elem)\n    \n    upper = list(sorted(upper))\n    lower = list(sorted(lower))\n                    \n    print(''.join(lower+upper+odd+even))\n    \nif __name__ == '__main__':\n    str_list = list(input())\n    sorting(str_list)\n",
            "score": 0.2,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "ginortS",
            "code": "def sorting(lst):\n    \n    upper = []\n    lower = []\n    odd = []\n    even = []\n\n    for elem in lst:\n        if elem.isupper():\n            upper.append(elem)\n        elif elem.islower():\n            lower.append(elem)\n        elif elem.isnumeric():\n            if int(elem) % 2 == 0:\n                even.append(elem)\n            else:\n                odd.append(elem)\n    \n    upper = list(sorted(upper))\n    lower = list(sorted(lower))\n    odd = list(sorted(odd))\n    even = list(sorted(even))\n                    \n    print(''.join(lower+upper+odd+even))\n    \nif __name__ == '__main__':\n    str_list = list(input())\n    sorting(str_list)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "ginortS",
            "code": "def sorting(lst):\n    \n    lower, upper, odd, even = [], [], [], []\n\n    for elem in lst:\n        if elem.isupper():\n            upper.append(elem)\n        elif elem.islower():\n            lower.append(elem)\n        elif elem.isnumeric():\n            (even if int(elem) % 2 == 0 else odd).append(elem) \n                    \n    print(''.join(sorted(lower) + sorted(upper) + sorted(odd) + sorted(even)))\n    \nif __name__ == '__main__':\n    str_list = list(input())\n    sorting(str_list)\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Words Score",
            "code": "def is_vowel(letter):\n    return letter in ['a', 'e', 'i', 'o', 'u', 'y']\n\ndef score_words(words):\n    score = 0\n    for word in words:\n        num_vowels = 0\n        for letter in word:\n            if is_vowel(letter):\n                num_vowels += 1\n        if num_vowels % 2 == 0:\n            score += 2\n        else:\n            score+=1\n        \n    return score\n\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Default Arguments",
            "code": "\n\ndef print_from_stream(n, stream=EvenStream()):\n    for _ in range(n):\n        print(stream.get_next())\n\n",
            "score": 0.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Default Arguments",
            "code": "\n\ndef print_from_stream(n, stream=None):\n    if stream is None:\n        stream = EvenStream()\n    for _ in range(n):\n        print(stream.get_next())\n\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Reduce Function",
            "code": "\n\ndef product(fracs):\n    t = reduce(lambda x, y: x * y, fracs) \n    return t.numerator, t.denominator\n\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "XML2 - Find the Maximum Depth",
            "code": "\n\nmaxdepth = 0\ndef depth(elem, level):\n    global maxdepth\n    if level + 1 \u003e maxdepth:\n        maxdepth = level + 1\n    for child in elem:\n        depth(child, level + 1)\n\n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "XML 1 - Find the Score",
            "code": "\nnumber = 0\ndef get_attr_number(node):\n    global number\n    number += len(node.attrib)\n    for child in node:\n        number += 1\n        get_attr_number(child)\n    return number\n    \n",
            "score": 0.125,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "XML 1 - Find the Score",
            "code": "\nnumber = 0\ndef get_attr_number(node):\n    global number\n    number = len(node.attrib)\n    for child in node:\n        number += get_attr_number(child)\n    return number;\n    \n",
            "score": 1.0,
            "language": "python3"
        },
        {
            "contest": "Master",
            "challenge": "Standardize Mobile Number Using Decorators",
            "code": "def wrapper(f):\n    def fun(l):\n        formatted_list = []\n        for phone in l:\n            if phone[0] == '0':\n                new_phone = f\"+91 {phone[1:6]} {phone[6:]}\"\n                formatted_list.append(new_phone)\n            elif phone[0] == '9' and len(phone) == 10:\n                new_phone = f\"+91 {phone[0:5]} {phone[5:]}\"\n                formatted_list.append(new_phone)\n            elif len(phone) == 12:\n                new_phone = f\"+91 {phone[2:7]} {phone[7:]}\"\n                formatted_list.append(new_phone)\n            elif len(phone) == 13:\n                new_phone = f\"+91 {phone[3:8]} {phone[8:]}\"\n                formatted_list.append(new_phone)\n        f(formatted_list)\n    return fun\n    \n",
            "score": 0.375,
            "language": "python3"
        }
    ],
    "teams": [],
    "contest_participations": [
        {
            "jobs_consent": null,
            "contest": "Master"
        }
    ],
    "forum_comments": [],
    "all_ratings": [],
    "contest_medals": [],
    "survey_results": [],
    "messages_sent": [],
    "run_codes": [],
    "contests_created": []
}